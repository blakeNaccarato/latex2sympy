# Generated from LATEX.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4, 1, 126, 948, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6,
        7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7,
        13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2,
        20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7,
        26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2,
        33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7,
        39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2,
        46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 1, 0, 1, 0, 1, 1, 1, 1,
        3, 1, 107, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 113, 8, 2, 10, 2, 12, 2, 116, 9, 2, 1, 2, 1,
        2, 1, 3, 1, 3, 1, 3, 5, 3, 123, 8, 3, 10, 3, 12, 3, 126, 9, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
        1, 4, 5, 4, 134, 8, 4, 10, 4, 12, 4, 137, 9, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
        5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 252, 8, 5, 1, 6, 1, 6, 1, 6, 1,
        6, 1, 6, 5, 6, 259, 8, 6, 10, 6, 12, 6, 262, 9, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 5, 6, 269,
        8, 6, 10, 6, 12, 6, 272, 9, 6, 3, 6, 274, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1,
        9, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 288, 8, 9, 10, 9, 12, 9, 291, 9, 9, 1, 10, 1, 10, 1, 10, 1,
        10, 1, 10, 1, 10, 5, 10, 299, 8, 10, 10, 10, 12, 10, 302, 9, 10, 1, 11, 1, 11, 1, 11, 1,
        11, 1, 11, 1, 11, 5, 11, 310, 8, 11, 10, 11, 12, 11, 313, 9, 11, 1, 12, 1, 12, 1, 12, 4,
        12, 318, 8, 12, 11, 12, 12, 12, 319, 3, 12, 322, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 5,
        13, 328, 8, 13, 10, 13, 12, 13, 331, 9, 13, 3, 13, 333, 8, 13, 1, 14, 1, 14, 5, 14, 337,
        8, 14, 10, 14, 12, 14, 340, 9, 14, 1, 15, 1, 15, 5, 15, 344, 8, 15, 10, 15, 12, 15, 347,
        9, 15, 1, 16, 1, 16, 3, 16, 351, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17,
        359, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 365, 8, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1,
        19, 1, 19, 3, 19, 373, 8, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1,
        20, 1, 20, 1, 20, 1, 20, 3, 20, 387, 8, 20, 1, 20, 3, 20, 390, 8, 20, 5, 20, 392, 8, 20,
        10, 20, 12, 20, 395, 9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21,
        1, 21, 3, 21, 407, 8, 21, 1, 21, 3, 21, 410, 8, 21, 5, 21, 412, 8, 21, 10, 21, 12, 21,
        415, 9, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 426, 8,
        22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 436, 8, 23, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1,
        24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 550, 8, 24, 1, 25, 1, 25, 1, 25, 1,
        25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
        25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
        25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
        25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 600, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1,
        26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
        26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
        26, 1, 26, 3, 26, 634, 8, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
        27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
        27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 668, 8,
        27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 3, 29, 678, 8, 29, 1, 29, 1,
        29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 688, 8, 29, 1, 30, 1, 30, 1, 30, 1,
        30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 700, 8, 30, 1, 31, 1, 31, 1, 31, 1,
        31, 1, 31, 1, 32, 4, 32, 708, 8, 32, 11, 32, 12, 32, 709, 1, 33, 1, 33, 1, 33, 1, 33, 1,
        33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1,
        35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3,
        39, 742, 8, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 750, 8, 40, 1, 41, 1, 41,
        3, 41, 754, 8, 41, 1, 41, 3, 41, 757, 8, 41, 1, 41, 3, 41, 760, 8, 41, 1, 41, 3, 41, 763,
        8, 41, 3, 41, 765, 8, 41, 1, 41, 3, 41, 768, 8, 41, 1, 41, 1, 41, 1, 41, 3, 41, 773, 8,
        41, 1, 41, 1, 41, 1, 41, 3, 41, 778, 8, 41, 1, 41, 1, 41, 1, 41, 3, 41, 783, 8, 41, 1, 41,
        1, 41, 1, 41, 3, 41, 788, 8, 41, 1, 41, 1, 41, 3, 41, 792, 8, 41, 1, 41, 3, 41, 795, 8,
        41, 1, 41, 3, 41, 798, 8, 41, 1, 41, 3, 41, 801, 8, 41, 3, 41, 803, 8, 41, 1, 41, 3, 41,
        806, 8, 41, 1, 41, 1, 41, 1, 41, 3, 41, 811, 8, 41, 1, 41, 1, 41, 1, 41, 3, 41, 816, 8,
        41, 1, 41, 1, 41, 1, 41, 3, 41, 821, 8, 41, 1, 41, 1, 41, 1, 41, 3, 41, 826, 8, 41, 1, 41,
        1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41,
        1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 849, 8, 41, 1, 41, 3, 41, 852, 8,
        41, 1, 41, 1, 41, 1, 41, 3, 41, 857, 8, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 864,
        8, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41,
        877, 8, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 887, 8, 41, 3,
        41, 889, 8, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 896, 8, 42, 1, 43, 1, 43, 1, 43,
        1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 907, 8, 43, 1, 43, 1, 43, 1, 44, 1, 44,
        1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 3, 46, 920, 8, 46, 1, 47, 1, 47, 1, 48,
        1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 929, 8, 48, 1, 48, 1, 48, 3, 48, 933, 8, 48, 1, 49, 1,
        49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 941, 8, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1,
        50, 0, 6, 8, 18, 20, 22, 40, 42, 51, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
        28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70,
        72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 12, 1, 0, 100, 101, 1,
        0, 116, 121, 1, 0, 3, 4, 4, 0, 5, 6, 83, 85, 89, 89, 104, 104, 1, 0, 109, 111, 1, 0, 87,
        88, 2, 0, 42, 65, 79, 80, 2, 0, 77, 78, 81, 82, 2, 0, 66, 71, 74, 75, 1, 0, 72, 73, 1, 0,
        40, 41, 2, 0, 111, 111, 124, 124, 1059, 0, 102, 1, 0, 0, 0, 2, 106, 1, 0, 0, 0, 4, 108,
        1, 0, 0, 0, 6, 119, 1, 0, 0, 0, 8, 127, 1, 0, 0, 0, 10, 251, 1, 0, 0, 0, 12, 273, 1, 0, 0,
        0, 14, 275, 1, 0, 0, 0, 16, 279, 1, 0, 0, 0, 18, 281, 1, 0, 0, 0, 20, 292, 1, 0, 0, 0, 22,
        303, 1, 0, 0, 0, 24, 321, 1, 0, 0, 0, 26, 332, 1, 0, 0, 0, 28, 334, 1, 0, 0, 0, 30, 341,
        1, 0, 0, 0, 32, 350, 1, 0, 0, 0, 34, 352, 1, 0, 0, 0, 36, 360, 1, 0, 0, 0, 38, 368, 1, 0,
        0, 0, 40, 376, 1, 0, 0, 0, 42, 396, 1, 0, 0, 0, 44, 425, 1, 0, 0, 0, 46, 435, 1, 0, 0, 0,
        48, 549, 1, 0, 0, 0, 50, 599, 1, 0, 0, 0, 52, 633, 1, 0, 0, 0, 54, 667, 1, 0, 0, 0, 56, 669,
        1, 0, 0, 0, 58, 677, 1, 0, 0, 0, 60, 699, 1, 0, 0, 0, 62, 701, 1, 0, 0, 0, 64, 707, 1, 0,
        0, 0, 66, 711, 1, 0, 0, 0, 68, 719, 1, 0, 0, 0, 70, 727, 1, 0, 0, 0, 72, 729, 1, 0, 0, 0,
        74, 731, 1, 0, 0, 0, 76, 733, 1, 0, 0, 0, 78, 741, 1, 0, 0, 0, 80, 749, 1, 0, 0, 0, 82, 888,
        1, 0, 0, 0, 84, 895, 1, 0, 0, 0, 86, 897, 1, 0, 0, 0, 88, 910, 1, 0, 0, 0, 90, 912, 1, 0,
        0, 0, 92, 919, 1, 0, 0, 0, 94, 921, 1, 0, 0, 0, 96, 923, 1, 0, 0, 0, 98, 934, 1, 0, 0, 0,
        100, 942, 1, 0, 0, 0, 102, 103, 7, 0, 0, 0, 103, 1, 1, 0, 0, 0, 104, 107, 3, 8, 4, 0, 105,
        107, 3, 10, 5, 0, 106, 104, 1, 0, 0, 0, 106, 105, 1, 0, 0, 0, 107, 3, 1, 0, 0, 0, 108, 109,
        5, 96, 0, 0, 109, 114, 3, 6, 3, 0, 110, 111, 5, 99, 0, 0, 111, 113, 3, 6, 3, 0, 112, 110,
        1, 0, 0, 0, 113, 116, 1, 0, 0, 0, 114, 112, 1, 0, 0, 0, 114, 115, 1, 0, 0, 0, 115, 117,
        1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 117, 118, 5, 97, 0, 0, 118, 5, 1, 0, 0, 0, 119, 124, 3,
        16, 8, 0, 120, 121, 5, 98, 0, 0, 121, 123, 3, 16, 8, 0, 122, 120, 1, 0, 0, 0, 123, 126,
        1, 0, 0, 0, 124, 122, 1, 0, 0, 0, 124, 125, 1, 0, 0, 0, 125, 7, 1, 0, 0, 0, 126, 124, 1,
        0, 0, 0, 127, 128, 6, 4, -1, 0, 128, 129, 3, 16, 8, 0, 129, 135, 1, 0, 0, 0, 130, 131,
        10, 2, 0, 0, 131, 132, 7, 1, 0, 0, 132, 134, 3, 8, 4, 3, 133, 130, 1, 0, 0, 0, 134, 137,
        1, 0, 0, 0, 135, 133, 1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 9, 1, 0, 0, 0, 137, 135, 1,
        0, 0, 0, 138, 252, 3, 12, 6, 0, 139, 140, 5, 7, 0, 0, 140, 141, 3, 12, 6, 0, 141, 142,
        5, 8, 0, 0, 142, 252, 1, 0, 0, 0, 143, 144, 5, 9, 0, 0, 144, 145, 3, 12, 6, 0, 145, 146,
        5, 10, 0, 0, 146, 252, 1, 0, 0, 0, 147, 148, 5, 11, 0, 0, 148, 149, 3, 12, 6, 0, 149, 150,
        5, 12, 0, 0, 150, 252, 1, 0, 0, 0, 151, 152, 5, 13, 0, 0, 152, 153, 3, 12, 6, 0, 153, 154,
        5, 14, 0, 0, 154, 252, 1, 0, 0, 0, 155, 156, 5, 15, 0, 0, 156, 157, 3, 12, 6, 0, 157, 158,
        5, 16, 0, 0, 158, 252, 1, 0, 0, 0, 159, 160, 5, 17, 0, 0, 160, 161, 3, 12, 6, 0, 161, 162,
        5, 18, 0, 0, 162, 252, 1, 0, 0, 0, 163, 164, 5, 19, 0, 0, 164, 165, 3, 12, 6, 0, 165, 166,
        5, 20, 0, 0, 166, 252, 1, 0, 0, 0, 167, 168, 5, 33, 0, 0, 168, 169, 5, 7, 0, 0, 169, 170,
        3, 12, 6, 0, 170, 171, 5, 34, 0, 0, 171, 172, 5, 8, 0, 0, 172, 252, 1, 0, 0, 0, 173, 174,
        5, 33, 0, 0, 174, 175, 5, 9, 0, 0, 175, 176, 3, 12, 6, 0, 176, 177, 5, 34, 0, 0, 177, 178,
        5, 10, 0, 0, 178, 252, 1, 0, 0, 0, 179, 180, 5, 33, 0, 0, 180, 181, 5, 11, 0, 0, 181, 182,
        3, 12, 6, 0, 182, 183, 5, 34, 0, 0, 183, 184, 5, 12, 0, 0, 184, 252, 1, 0, 0, 0, 185, 186,
        5, 33, 0, 0, 186, 187, 5, 13, 0, 0, 187, 188, 3, 12, 6, 0, 188, 189, 5, 34, 0, 0, 189,
        190, 5, 14, 0, 0, 190, 252, 1, 0, 0, 0, 191, 192, 5, 33, 0, 0, 192, 193, 5, 15, 0, 0, 193,
        194, 3, 12, 6, 0, 194, 195, 5, 34, 0, 0, 195, 196, 5, 16, 0, 0, 196, 252, 1, 0, 0, 0, 197,
        198, 5, 33, 0, 0, 198, 199, 5, 17, 0, 0, 199, 200, 3, 12, 6, 0, 200, 201, 5, 34, 0, 0,
        201, 202, 5, 18, 0, 0, 202, 252, 1, 0, 0, 0, 203, 204, 5, 33, 0, 0, 204, 205, 5, 19, 0,
        0, 205, 206, 3, 12, 6, 0, 206, 207, 5, 34, 0, 0, 207, 208, 5, 20, 0, 0, 208, 252, 1, 0,
        0, 0, 209, 210, 5, 35, 0, 0, 210, 211, 5, 7, 0, 0, 211, 212, 3, 12, 6, 0, 212, 213, 5,
        36, 0, 0, 213, 214, 5, 8, 0, 0, 214, 252, 1, 0, 0, 0, 215, 216, 5, 35, 0, 0, 216, 217,
        5, 9, 0, 0, 217, 218, 3, 12, 6, 0, 218, 219, 5, 36, 0, 0, 219, 220, 5, 10, 0, 0, 220, 252,
        1, 0, 0, 0, 221, 222, 5, 35, 0, 0, 222, 223, 5, 11, 0, 0, 223, 224, 3, 12, 6, 0, 224, 225,
        5, 36, 0, 0, 225, 226, 5, 12, 0, 0, 226, 252, 1, 0, 0, 0, 227, 228, 5, 35, 0, 0, 228, 229,
        5, 13, 0, 0, 229, 230, 3, 12, 6, 0, 230, 231, 5, 36, 0, 0, 231, 232, 5, 14, 0, 0, 232,
        252, 1, 0, 0, 0, 233, 234, 5, 35, 0, 0, 234, 235, 5, 15, 0, 0, 235, 236, 3, 12, 6, 0, 236,
        237, 5, 36, 0, 0, 237, 238, 5, 16, 0, 0, 238, 252, 1, 0, 0, 0, 239, 240, 5, 35, 0, 0, 240,
        241, 5, 17, 0, 0, 241, 242, 3, 12, 6, 0, 242, 243, 5, 36, 0, 0, 243, 244, 5, 18, 0, 0,
        244, 252, 1, 0, 0, 0, 245, 246, 5, 35, 0, 0, 246, 247, 5, 19, 0, 0, 247, 248, 3, 12, 6,
        0, 248, 249, 5, 36, 0, 0, 249, 250, 5, 20, 0, 0, 250, 252, 1, 0, 0, 0, 251, 138, 1, 0,
        0, 0, 251, 139, 1, 0, 0, 0, 251, 143, 1, 0, 0, 0, 251, 147, 1, 0, 0, 0, 251, 151, 1, 0,
        0, 0, 251, 155, 1, 0, 0, 0, 251, 159, 1, 0, 0, 0, 251, 163, 1, 0, 0, 0, 251, 167, 1, 0,
        0, 0, 251, 173, 1, 0, 0, 0, 251, 179, 1, 0, 0, 0, 251, 185, 1, 0, 0, 0, 251, 191, 1, 0,
        0, 0, 251, 197, 1, 0, 0, 0, 251, 203, 1, 0, 0, 0, 251, 209, 1, 0, 0, 0, 251, 215, 1, 0,
        0, 0, 251, 221, 1, 0, 0, 0, 251, 227, 1, 0, 0, 0, 251, 233, 1, 0, 0, 0, 251, 239, 1, 0,
        0, 0, 251, 245, 1, 0, 0, 0, 252, 11, 1, 0, 0, 0, 253, 254, 3, 8, 4, 0, 254, 255, 5, 106,
        0, 0, 255, 260, 3, 8, 4, 0, 256, 257, 5, 106, 0, 0, 257, 259, 3, 8, 4, 0, 258, 256, 1,
        0, 0, 0, 259, 262, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 274, 1,
        0, 0, 0, 262, 260, 1, 0, 0, 0, 263, 264, 3, 8, 4, 0, 264, 265, 5, 105, 0, 0, 265, 270,
        3, 8, 4, 0, 266, 267, 5, 105, 0, 0, 267, 269, 3, 8, 4, 0, 268, 266, 1, 0, 0, 0, 269, 272,
        1, 0, 0, 0, 270, 268, 1, 0, 0, 0, 270, 271, 1, 0, 0, 0, 271, 274, 1, 0, 0, 0, 272, 270,
        1, 0, 0, 0, 273, 253, 1, 0, 0, 0, 273, 263, 1, 0, 0, 0, 274, 13, 1, 0, 0, 0, 275, 276, 3,
        16, 8, 0, 276, 277, 5, 116, 0, 0, 277, 278, 3, 16, 8, 0, 278, 15, 1, 0, 0, 0, 279, 280,
        3, 18, 9, 0, 280, 17, 1, 0, 0, 0, 281, 282, 6, 9, -1, 0, 282, 283, 3, 20, 10, 0, 283, 289,
        1, 0, 0, 0, 284, 285, 10, 2, 0, 0, 285, 286, 7, 2, 0, 0, 286, 288, 3, 18, 9, 3, 287, 284,
        1, 0, 0, 0, 288, 291, 1, 0, 0, 0, 289, 287, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 19, 1,
        0, 0, 0, 291, 289, 1, 0, 0, 0, 292, 293, 6, 10, -1, 0, 293, 294, 3, 24, 12, 0, 294, 300,
        1, 0, 0, 0, 295, 296, 10, 2, 0, 0, 296, 297, 7, 3, 0, 0, 297, 299, 3, 20, 10, 3, 298, 295,
        1, 0, 0, 0, 299, 302, 1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 21, 1,
        0, 0, 0, 302, 300, 1, 0, 0, 0, 303, 304, 6, 11, -1, 0, 304, 305, 3, 26, 13, 0, 305, 311,
        1, 0, 0, 0, 306, 307, 10, 2, 0, 0, 307, 308, 7, 3, 0, 0, 308, 310, 3, 22, 11, 3, 309, 306,
        1, 0, 0, 0, 310, 313, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 311, 312, 1, 0, 0, 0, 312, 23, 1,
        0, 0, 0, 313, 311, 1, 0, 0, 0, 314, 315, 7, 2, 0, 0, 315, 322, 3, 24, 12, 0, 316, 318,
        3, 28, 14, 0, 317, 316, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 319, 320,
        1, 0, 0, 0, 320, 322, 1, 0, 0, 0, 321, 314, 1, 0, 0, 0, 321, 317, 1, 0, 0, 0, 322, 25, 1,
        0, 0, 0, 323, 324, 7, 2, 0, 0, 324, 333, 3, 26, 13, 0, 325, 329, 3, 28, 14, 0, 326, 328,
        3, 30, 15, 0, 327, 326, 1, 0, 0, 0, 328, 331, 1, 0, 0, 0, 329, 327, 1, 0, 0, 0, 329, 330,
        1, 0, 0, 0, 330, 333, 1, 0, 0, 0, 331, 329, 1, 0, 0, 0, 332, 323, 1, 0, 0, 0, 332, 325,
        1, 0, 0, 0, 333, 27, 1, 0, 0, 0, 334, 338, 3, 40, 20, 0, 335, 337, 3, 32, 16, 0, 336, 335,
        1, 0, 0, 0, 337, 340, 1, 0, 0, 0, 338, 336, 1, 0, 0, 0, 338, 339, 1, 0, 0, 0, 339, 29, 1,
        0, 0, 0, 340, 338, 1, 0, 0, 0, 341, 345, 3, 42, 21, 0, 342, 344, 3, 32, 16, 0, 343, 342,
        1, 0, 0, 0, 344, 347, 1, 0, 0, 0, 345, 343, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 31, 1,
        0, 0, 0, 347, 345, 1, 0, 0, 0, 348, 351, 5, 122, 0, 0, 349, 351, 3, 34, 17, 0, 350, 348,
        1, 0, 0, 0, 350, 349, 1, 0, 0, 0, 351, 33, 1, 0, 0, 0, 352, 358, 5, 21, 0, 0, 353, 359,
        3, 38, 19, 0, 354, 359, 3, 36, 18, 0, 355, 356, 3, 38, 19, 0, 356, 357, 3, 36, 18, 0,
        357, 359, 1, 0, 0, 0, 358, 353, 1, 0, 0, 0, 358, 354, 1, 0, 0, 0, 358, 355, 1, 0, 0, 0,
        359, 35, 1, 0, 0, 0, 360, 361, 5, 102, 0, 0, 361, 364, 5, 11, 0, 0, 362, 365, 3, 16, 8,
        0, 363, 365, 3, 14, 7, 0, 364, 362, 1, 0, 0, 0, 364, 363, 1, 0, 0, 0, 365, 366, 1, 0, 0,
        0, 366, 367, 5, 12, 0, 0, 367, 37, 1, 0, 0, 0, 368, 369, 5, 103, 0, 0, 369, 372, 5, 11,
        0, 0, 370, 373, 3, 16, 8, 0, 371, 373, 3, 14, 7, 0, 372, 370, 1, 0, 0, 0, 372, 371, 1,
        0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 375, 5, 12, 0, 0, 375, 39, 1, 0, 0, 0, 376, 377, 6,
        20, -1, 0, 377, 378, 3, 44, 22, 0, 378, 393, 1, 0, 0, 0, 379, 380, 10, 2, 0, 0, 380, 386,
        5, 103, 0, 0, 381, 387, 3, 60, 30, 0, 382, 383, 5, 11, 0, 0, 383, 384, 3, 16, 8, 0, 384,
        385, 5, 12, 0, 0, 385, 387, 1, 0, 0, 0, 386, 381, 1, 0, 0, 0, 386, 382, 1, 0, 0, 0, 387,
        389, 1, 0, 0, 0, 388, 390, 3, 96, 48, 0, 389, 388, 1, 0, 0, 0, 389, 390, 1, 0, 0, 0, 390,
        392, 1, 0, 0, 0, 391, 379, 1, 0, 0, 0, 392, 395, 1, 0, 0, 0, 393, 391, 1, 0, 0, 0, 393,
        394, 1, 0, 0, 0, 394, 41, 1, 0, 0, 0, 395, 393, 1, 0, 0, 0, 396, 397, 6, 21, -1, 0, 397,
        398, 3, 46, 23, 0, 398, 413, 1, 0, 0, 0, 399, 400, 10, 2, 0, 0, 400, 406, 5, 103, 0, 0,
        401, 407, 3, 60, 30, 0, 402, 403, 5, 11, 0, 0, 403, 404, 3, 16, 8, 0, 404, 405, 5, 12,
        0, 0, 405, 407, 1, 0, 0, 0, 406, 401, 1, 0, 0, 0, 406, 402, 1, 0, 0, 0, 407, 409, 1, 0,
        0, 0, 408, 410, 3, 96, 48, 0, 409, 408, 1, 0, 0, 0, 409, 410, 1, 0, 0, 0, 410, 412, 1,
        0, 0, 0, 411, 399, 1, 0, 0, 0, 412, 415, 1, 0, 0, 0, 413, 411, 1, 0, 0, 0, 413, 414, 1,
        0, 0, 0, 414, 43, 1, 0, 0, 0, 415, 413, 1, 0, 0, 0, 416, 426, 3, 48, 24, 0, 417, 426, 3,
        50, 25, 0, 418, 426, 3, 52, 26, 0, 419, 426, 3, 54, 27, 0, 420, 426, 3, 82, 41, 0, 421,
        426, 3, 60, 30, 0, 422, 426, 3, 66, 33, 0, 423, 426, 3, 68, 34, 0, 424, 426, 3, 4, 2,
        0, 425, 416, 1, 0, 0, 0, 425, 417, 1, 0, 0, 0, 425, 418, 1, 0, 0, 0, 425, 419, 1, 0, 0,
        0, 425, 420, 1, 0, 0, 0, 425, 421, 1, 0, 0, 0, 425, 422, 1, 0, 0, 0, 425, 423, 1, 0, 0,
        0, 425, 424, 1, 0, 0, 0, 426, 45, 1, 0, 0, 0, 427, 436, 3, 48, 24, 0, 428, 436, 3, 50,
        25, 0, 429, 436, 3, 52, 26, 0, 430, 436, 3, 54, 27, 0, 431, 436, 3, 60, 30, 0, 432, 436,
        3, 66, 33, 0, 433, 436, 3, 68, 34, 0, 434, 436, 3, 4, 2, 0, 435, 427, 1, 0, 0, 0, 435,
        428, 1, 0, 0, 0, 435, 429, 1, 0, 0, 0, 435, 430, 1, 0, 0, 0, 435, 431, 1, 0, 0, 0, 435,
        432, 1, 0, 0, 0, 435, 433, 1, 0, 0, 0, 435, 434, 1, 0, 0, 0, 436, 47, 1, 0, 0, 0, 437, 438,
        5, 7, 0, 0, 438, 439, 3, 16, 8, 0, 439, 440, 5, 8, 0, 0, 440, 550, 1, 0, 0, 0, 441, 442,
        5, 9, 0, 0, 442, 443, 3, 16, 8, 0, 443, 444, 5, 10, 0, 0, 444, 550, 1, 0, 0, 0, 445, 446,
        5, 11, 0, 0, 446, 447, 3, 16, 8, 0, 447, 448, 5, 12, 0, 0, 448, 550, 1, 0, 0, 0, 449, 450,
        5, 13, 0, 0, 450, 451, 3, 16, 8, 0, 451, 452, 5, 14, 0, 0, 452, 550, 1, 0, 0, 0, 453, 454,
        5, 15, 0, 0, 454, 455, 3, 16, 8, 0, 455, 456, 5, 16, 0, 0, 456, 550, 1, 0, 0, 0, 457, 458,
        5, 17, 0, 0, 458, 459, 3, 16, 8, 0, 459, 460, 5, 18, 0, 0, 460, 550, 1, 0, 0, 0, 461, 462,
        5, 19, 0, 0, 462, 463, 3, 16, 8, 0, 463, 464, 5, 20, 0, 0, 464, 550, 1, 0, 0, 0, 465, 466,
        5, 33, 0, 0, 466, 467, 5, 7, 0, 0, 467, 468, 3, 16, 8, 0, 468, 469, 5, 34, 0, 0, 469, 470,
        5, 8, 0, 0, 470, 550, 1, 0, 0, 0, 471, 472, 5, 33, 0, 0, 472, 473, 5, 9, 0, 0, 473, 474,
        3, 16, 8, 0, 474, 475, 5, 34, 0, 0, 475, 476, 5, 10, 0, 0, 476, 550, 1, 0, 0, 0, 477, 478,
        5, 33, 0, 0, 478, 479, 5, 11, 0, 0, 479, 480, 3, 16, 8, 0, 480, 481, 5, 34, 0, 0, 481,
        482, 5, 12, 0, 0, 482, 550, 1, 0, 0, 0, 483, 484, 5, 33, 0, 0, 484, 485, 5, 13, 0, 0, 485,
        486, 3, 16, 8, 0, 486, 487, 5, 34, 0, 0, 487, 488, 5, 14, 0, 0, 488, 550, 1, 0, 0, 0, 489,
        490, 5, 33, 0, 0, 490, 491, 5, 15, 0, 0, 491, 492, 3, 16, 8, 0, 492, 493, 5, 34, 0, 0,
        493, 494, 5, 16, 0, 0, 494, 550, 1, 0, 0, 0, 495, 496, 5, 33, 0, 0, 496, 497, 5, 17, 0,
        0, 497, 498, 3, 16, 8, 0, 498, 499, 5, 34, 0, 0, 499, 500, 5, 18, 0, 0, 500, 550, 1, 0,
        0, 0, 501, 502, 5, 33, 0, 0, 502, 503, 5, 19, 0, 0, 503, 504, 3, 16, 8, 0, 504, 505, 5,
        34, 0, 0, 505, 506, 5, 20, 0, 0, 506, 550, 1, 0, 0, 0, 507, 508, 5, 35, 0, 0, 508, 509,
        5, 7, 0, 0, 509, 510, 3, 16, 8, 0, 510, 511, 5, 36, 0, 0, 511, 512, 5, 8, 0, 0, 512, 550,
        1, 0, 0, 0, 513, 514, 5, 35, 0, 0, 514, 515, 5, 9, 0, 0, 515, 516, 3, 16, 8, 0, 516, 517,
        5, 36, 0, 0, 517, 518, 5, 10, 0, 0, 518, 550, 1, 0, 0, 0, 519, 520, 5, 35, 0, 0, 520, 521,
        5, 11, 0, 0, 521, 522, 3, 16, 8, 0, 522, 523, 5, 36, 0, 0, 523, 524, 5, 12, 0, 0, 524,
        550, 1, 0, 0, 0, 525, 526, 5, 35, 0, 0, 526, 527, 5, 13, 0, 0, 527, 528, 3, 16, 8, 0, 528,
        529, 5, 36, 0, 0, 529, 530, 5, 14, 0, 0, 530, 550, 1, 0, 0, 0, 531, 532, 5, 35, 0, 0, 532,
        533, 5, 15, 0, 0, 533, 534, 3, 16, 8, 0, 534, 535, 5, 36, 0, 0, 535, 536, 5, 16, 0, 0,
        536, 550, 1, 0, 0, 0, 537, 538, 5, 35, 0, 0, 538, 539, 5, 17, 0, 0, 539, 540, 3, 16, 8,
        0, 540, 541, 5, 36, 0, 0, 541, 542, 5, 18, 0, 0, 542, 550, 1, 0, 0, 0, 543, 544, 5, 35,
        0, 0, 544, 545, 5, 19, 0, 0, 545, 546, 3, 16, 8, 0, 546, 547, 5, 36, 0, 0, 547, 548, 5,
        20, 0, 0, 548, 550, 1, 0, 0, 0, 549, 437, 1, 0, 0, 0, 549, 441, 1, 0, 0, 0, 549, 445, 1,
        0, 0, 0, 549, 449, 1, 0, 0, 0, 549, 453, 1, 0, 0, 0, 549, 457, 1, 0, 0, 0, 549, 461, 1,
        0, 0, 0, 549, 465, 1, 0, 0, 0, 549, 471, 1, 0, 0, 0, 549, 477, 1, 0, 0, 0, 549, 483, 1,
        0, 0, 0, 549, 489, 1, 0, 0, 0, 549, 495, 1, 0, 0, 0, 549, 501, 1, 0, 0, 0, 549, 507, 1,
        0, 0, 0, 549, 513, 1, 0, 0, 0, 549, 519, 1, 0, 0, 0, 549, 525, 1, 0, 0, 0, 549, 531, 1,
        0, 0, 0, 549, 537, 1, 0, 0, 0, 549, 543, 1, 0, 0, 0, 550, 49, 1, 0, 0, 0, 551, 552, 5, 21,
        0, 0, 552, 553, 3, 16, 8, 0, 553, 554, 5, 21, 0, 0, 554, 600, 1, 0, 0, 0, 555, 556, 5,
        22, 0, 0, 556, 557, 3, 16, 8, 0, 557, 558, 5, 23, 0, 0, 558, 600, 1, 0, 0, 0, 559, 560,
        5, 24, 0, 0, 560, 561, 3, 16, 8, 0, 561, 562, 5, 24, 0, 0, 562, 600, 1, 0, 0, 0, 563, 564,
        5, 33, 0, 0, 564, 565, 5, 21, 0, 0, 565, 566, 3, 16, 8, 0, 566, 567, 5, 34, 0, 0, 567,
        568, 5, 21, 0, 0, 568, 600, 1, 0, 0, 0, 569, 570, 5, 33, 0, 0, 570, 571, 5, 22, 0, 0, 571,
        572, 3, 16, 8, 0, 572, 573, 5, 34, 0, 0, 573, 574, 5, 23, 0, 0, 574, 600, 1, 0, 0, 0, 575,
        576, 5, 33, 0, 0, 576, 577, 5, 24, 0, 0, 577, 578, 3, 16, 8, 0, 578, 579, 5, 34, 0, 0,
        579, 580, 5, 24, 0, 0, 580, 600, 1, 0, 0, 0, 581, 582, 5, 35, 0, 0, 582, 583, 5, 21, 0,
        0, 583, 584, 3, 16, 8, 0, 584, 585, 5, 36, 0, 0, 585, 586, 5, 21, 0, 0, 586, 600, 1, 0,
        0, 0, 587, 588, 5, 35, 0, 0, 588, 589, 5, 22, 0, 0, 589, 590, 3, 16, 8, 0, 590, 591, 5,
        36, 0, 0, 591, 592, 5, 23, 0, 0, 592, 600, 1, 0, 0, 0, 593, 594, 5, 35, 0, 0, 594, 595,
        5, 24, 0, 0, 595, 596, 3, 16, 8, 0, 596, 597, 5, 36, 0, 0, 597, 598, 5, 24, 0, 0, 598,
        600, 1, 0, 0, 0, 599, 551, 1, 0, 0, 0, 599, 555, 1, 0, 0, 0, 599, 559, 1, 0, 0, 0, 599,
        563, 1, 0, 0, 0, 599, 569, 1, 0, 0, 0, 599, 575, 1, 0, 0, 0, 599, 581, 1, 0, 0, 0, 599,
        587, 1, 0, 0, 0, 599, 593, 1, 0, 0, 0, 600, 51, 1, 0, 0, 0, 601, 602, 5, 25, 0, 0, 602,
        603, 3, 16, 8, 0, 603, 604, 5, 26, 0, 0, 604, 634, 1, 0, 0, 0, 605, 606, 5, 27, 0, 0, 606,
        607, 3, 16, 8, 0, 607, 608, 5, 28, 0, 0, 608, 634, 1, 0, 0, 0, 609, 610, 5, 33, 0, 0, 610,
        611, 5, 25, 0, 0, 611, 612, 3, 16, 8, 0, 612, 613, 5, 34, 0, 0, 613, 614, 5, 26, 0, 0,
        614, 634, 1, 0, 0, 0, 615, 616, 5, 33, 0, 0, 616, 617, 5, 27, 0, 0, 617, 618, 3, 16, 8,
        0, 618, 619, 5, 34, 0, 0, 619, 620, 5, 28, 0, 0, 620, 634, 1, 0, 0, 0, 621, 622, 5, 35,
        0, 0, 622, 623, 5, 25, 0, 0, 623, 624, 3, 16, 8, 0, 624, 625, 5, 36, 0, 0, 625, 626, 5,
        26, 0, 0, 626, 634, 1, 0, 0, 0, 627, 628, 5, 35, 0, 0, 628, 629, 5, 27, 0, 0, 629, 630,
        3, 16, 8, 0, 630, 631, 5, 36, 0, 0, 631, 632, 5, 28, 0, 0, 632, 634, 1, 0, 0, 0, 633, 601,
        1, 0, 0, 0, 633, 605, 1, 0, 0, 0, 633, 609, 1, 0, 0, 0, 633, 615, 1, 0, 0, 0, 633, 621,
        1, 0, 0, 0, 633, 627, 1, 0, 0, 0, 634, 53, 1, 0, 0, 0, 635, 636, 5, 29, 0, 0, 636, 637,
        3, 16, 8, 0, 637, 638, 5, 30, 0, 0, 638, 668, 1, 0, 0, 0, 639, 640, 5, 31, 0, 0, 640, 641,
        3, 16, 8, 0, 641, 642, 5, 32, 0, 0, 642, 668, 1, 0, 0, 0, 643, 644, 5, 33, 0, 0, 644, 645,
        5, 29, 0, 0, 645, 646, 3, 16, 8, 0, 646, 647, 5, 34, 0, 0, 647, 648, 5, 30, 0, 0, 648,
        668, 1, 0, 0, 0, 649, 650, 5, 33, 0, 0, 650, 651, 5, 31, 0, 0, 651, 652, 3, 16, 8, 0, 652,
        653, 5, 34, 0, 0, 653, 654, 5, 32, 0, 0, 654, 668, 1, 0, 0, 0, 655, 656, 5, 35, 0, 0, 656,
        657, 5, 29, 0, 0, 657, 658, 3, 16, 8, 0, 658, 659, 5, 36, 0, 0, 659, 660, 5, 30, 0, 0,
        660, 668, 1, 0, 0, 0, 661, 662, 5, 35, 0, 0, 662, 663, 5, 31, 0, 0, 663, 664, 3, 16, 8,
        0, 664, 665, 5, 36, 0, 0, 665, 666, 5, 32, 0, 0, 666, 668, 1, 0, 0, 0, 667, 635, 1, 0,
        0, 0, 667, 639, 1, 0, 0, 0, 667, 643, 1, 0, 0, 0, 667, 649, 1, 0, 0, 0, 667, 655, 1, 0,
        0, 0, 667, 661, 1, 0, 0, 0, 668, 55, 1, 0, 0, 0, 669, 670, 3, 0, 0, 0, 670, 671, 5, 11,
        0, 0, 671, 672, 3, 16, 8, 0, 672, 673, 5, 12, 0, 0, 673, 57, 1, 0, 0, 0, 674, 678, 5, 111,
        0, 0, 675, 678, 5, 124, 0, 0, 676, 678, 3, 56, 28, 0, 677, 674, 1, 0, 0, 0, 677, 675,
        1, 0, 0, 0, 677, 676, 1, 0, 0, 0, 678, 687, 1, 0, 0, 0, 679, 680, 3, 98, 49, 0, 680, 681,
        3, 96, 48, 0, 681, 688, 1, 0, 0, 0, 682, 683, 3, 96, 48, 0, 683, 684, 3, 98, 49, 0, 684,
        688, 1, 0, 0, 0, 685, 688, 3, 96, 48, 0, 686, 688, 3, 98, 49, 0, 687, 679, 1, 0, 0, 0,
        687, 682, 1, 0, 0, 0, 687, 685, 1, 0, 0, 0, 687, 686, 1, 0, 0, 0, 687, 688, 1, 0, 0, 0,
        688, 59, 1, 0, 0, 0, 689, 700, 3, 58, 29, 0, 690, 700, 5, 125, 0, 0, 691, 700, 5, 112,
        0, 0, 692, 700, 5, 114, 0, 0, 693, 700, 5, 113, 0, 0, 694, 700, 5, 123, 0, 0, 695, 700,
        5, 115, 0, 0, 696, 700, 5, 108, 0, 0, 697, 700, 3, 62, 31, 0, 698, 700, 5, 126, 0, 0,
        699, 689, 1, 0, 0, 0, 699, 690, 1, 0, 0, 0, 699, 691, 1, 0, 0, 0, 699, 692, 1, 0, 0, 0,
        699, 693, 1, 0, 0, 0, 699, 694, 1, 0, 0, 0, 699, 695, 1, 0, 0, 0, 699, 696, 1, 0, 0, 0,
        699, 697, 1, 0, 0, 0, 699, 698, 1, 0, 0, 0, 700, 61, 1, 0, 0, 0, 701, 702, 5, 90, 0, 0,
        702, 703, 5, 11, 0, 0, 703, 704, 3, 64, 32, 0, 704, 705, 5, 12, 0, 0, 705, 63, 1, 0, 0,
        0, 706, 708, 7, 4, 0, 0, 707, 706, 1, 0, 0, 0, 708, 709, 1, 0, 0, 0, 709, 707, 1, 0, 0,
        0, 709, 710, 1, 0, 0, 0, 710, 65, 1, 0, 0, 0, 711, 712, 5, 86, 0, 0, 712, 713, 5, 11, 0,
        0, 713, 714, 3, 16, 8, 0, 714, 715, 5, 12, 0, 0, 715, 716, 5, 11, 0, 0, 716, 717, 3, 16,
        8, 0, 717, 718, 5, 12, 0, 0, 718, 67, 1, 0, 0, 0, 719, 720, 7, 5, 0, 0, 720, 721, 5, 11,
        0, 0, 721, 722, 3, 16, 8, 0, 722, 723, 5, 12, 0, 0, 723, 724, 5, 11, 0, 0, 724, 725, 3,
        16, 8, 0, 725, 726, 5, 12, 0, 0, 726, 69, 1, 0, 0, 0, 727, 728, 7, 6, 0, 0, 728, 71, 1,
        0, 0, 0, 729, 730, 7, 7, 0, 0, 730, 73, 1, 0, 0, 0, 731, 732, 7, 8, 0, 0, 732, 75, 1, 0,
        0, 0, 733, 734, 7, 9, 0, 0, 734, 77, 1, 0, 0, 0, 735, 742, 3, 70, 35, 0, 736, 737, 5, 91,
        0, 0, 737, 738, 5, 11, 0, 0, 738, 739, 3, 74, 37, 0, 739, 740, 5, 12, 0, 0, 740, 742,
        1, 0, 0, 0, 741, 735, 1, 0, 0, 0, 741, 736, 1, 0, 0, 0, 742, 79, 1, 0, 0, 0, 743, 750, 3,
        72, 36, 0, 744, 745, 5, 91, 0, 0, 745, 746, 5, 11, 0, 0, 746, 747, 3, 76, 38, 0, 747,
        748, 5, 12, 0, 0, 748, 750, 1, 0, 0, 0, 749, 743, 1, 0, 0, 0, 749, 744, 1, 0, 0, 0, 750,
        81, 1, 0, 0, 0, 751, 764, 3, 78, 39, 0, 752, 754, 3, 96, 48, 0, 753, 752, 1, 0, 0, 0, 753,
        754, 1, 0, 0, 0, 754, 756, 1, 0, 0, 0, 755, 757, 3, 98, 49, 0, 756, 755, 1, 0, 0, 0, 756,
        757, 1, 0, 0, 0, 757, 765, 1, 0, 0, 0, 758, 760, 3, 98, 49, 0, 759, 758, 1, 0, 0, 0, 759,
        760, 1, 0, 0, 0, 760, 762, 1, 0, 0, 0, 761, 763, 3, 96, 48, 0, 762, 761, 1, 0, 0, 0, 762,
        763, 1, 0, 0, 0, 763, 765, 1, 0, 0, 0, 764, 753, 1, 0, 0, 0, 764, 759, 1, 0, 0, 0, 765,
        787, 1, 0, 0, 0, 766, 768, 5, 33, 0, 0, 767, 766, 1, 0, 0, 0, 767, 768, 1, 0, 0, 0, 768,
        769, 1, 0, 0, 0, 769, 770, 5, 7, 0, 0, 770, 772, 3, 88, 44, 0, 771, 773, 5, 34, 0, 0, 772,
        771, 1, 0, 0, 0, 772, 773, 1, 0, 0, 0, 773, 774, 1, 0, 0, 0, 774, 775, 5, 8, 0, 0, 775,
        788, 1, 0, 0, 0, 776, 778, 5, 35, 0, 0, 777, 776, 1, 0, 0, 0, 777, 778, 1, 0, 0, 0, 778,
        779, 1, 0, 0, 0, 779, 780, 5, 7, 0, 0, 780, 782, 3, 88, 44, 0, 781, 783, 5, 36, 0, 0, 782,
        781, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783, 784, 1, 0, 0, 0, 784, 785, 5, 8, 0, 0, 785,
        788, 1, 0, 0, 0, 786, 788, 3, 90, 45, 0, 787, 767, 1, 0, 0, 0, 787, 777, 1, 0, 0, 0, 787,
        786, 1, 0, 0, 0, 788, 889, 1, 0, 0, 0, 789, 802, 3, 80, 40, 0, 790, 792, 3, 96, 48, 0,
        791, 790, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792, 794, 1, 0, 0, 0, 793, 795, 3, 98, 49,
        0, 794, 793, 1, 0, 0, 0, 794, 795, 1, 0, 0, 0, 795, 803, 1, 0, 0, 0, 796, 798, 3, 98, 49,
        0, 797, 796, 1, 0, 0, 0, 797, 798, 1, 0, 0, 0, 798, 800, 1, 0, 0, 0, 799, 801, 3, 96, 48,
        0, 800, 799, 1, 0, 0, 0, 800, 801, 1, 0, 0, 0, 801, 803, 1, 0, 0, 0, 802, 791, 1, 0, 0,
        0, 802, 797, 1, 0, 0, 0, 803, 825, 1, 0, 0, 0, 804, 806, 5, 33, 0, 0, 805, 804, 1, 0, 0,
        0, 805, 806, 1, 0, 0, 0, 806, 807, 1, 0, 0, 0, 807, 808, 5, 7, 0, 0, 808, 810, 3, 92, 46,
        0, 809, 811, 5, 34, 0, 0, 810, 809, 1, 0, 0, 0, 810, 811, 1, 0, 0, 0, 811, 812, 1, 0, 0,
        0, 812, 813, 5, 8, 0, 0, 813, 826, 1, 0, 0, 0, 814, 816, 5, 35, 0, 0, 815, 814, 1, 0, 0,
        0, 815, 816, 1, 0, 0, 0, 816, 817, 1, 0, 0, 0, 817, 818, 5, 7, 0, 0, 818, 820, 3, 92, 46,
        0, 819, 821, 5, 36, 0, 0, 820, 819, 1, 0, 0, 0, 820, 821, 1, 0, 0, 0, 821, 822, 1, 0, 0,
        0, 822, 823, 5, 8, 0, 0, 823, 826, 1, 0, 0, 0, 824, 826, 3, 94, 47, 0, 825, 805, 1, 0,
        0, 0, 825, 815, 1, 0, 0, 0, 825, 824, 1, 0, 0, 0, 826, 889, 1, 0, 0, 0, 827, 848, 5, 39,
        0, 0, 828, 829, 3, 96, 48, 0, 829, 830, 3, 98, 49, 0, 830, 849, 1, 0, 0, 0, 831, 832,
        3, 98, 49, 0, 832, 833, 3, 96, 48, 0, 833, 849, 1, 0, 0, 0, 834, 835, 5, 102, 0, 0, 835,
        836, 5, 11, 0, 0, 836, 837, 5, 12, 0, 0, 837, 838, 1, 0, 0, 0, 838, 839, 5, 103, 0, 0,
        839, 840, 5, 11, 0, 0, 840, 849, 5, 12, 0, 0, 841, 842, 5, 103, 0, 0, 842, 843, 5, 11,
        0, 0, 843, 844, 5, 12, 0, 0, 844, 845, 1, 0, 0, 0, 845, 846, 5, 102, 0, 0, 846, 847, 5,
        11, 0, 0, 847, 849, 5, 12, 0, 0, 848, 828, 1, 0, 0, 0, 848, 831, 1, 0, 0, 0, 848, 834,
        1, 0, 0, 0, 848, 841, 1, 0, 0, 0, 848, 849, 1, 0, 0, 0, 849, 856, 1, 0, 0, 0, 850, 852,
        3, 18, 9, 0, 851, 850, 1, 0, 0, 0, 851, 852, 1, 0, 0, 0, 852, 853, 1, 0, 0, 0, 853, 857,
        5, 108, 0, 0, 854, 857, 3, 66, 33, 0, 855, 857, 3, 18, 9, 0, 856, 851, 1, 0, 0, 0, 856,
        854, 1, 0, 0, 0, 856, 855, 1, 0, 0, 0, 857, 889, 1, 0, 0, 0, 858, 863, 5, 76, 0, 0, 859,
        860, 5, 17, 0, 0, 860, 861, 3, 16, 8, 0, 861, 862, 5, 18, 0, 0, 862, 864, 1, 0, 0, 0, 863,
        859, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 865, 1, 0, 0, 0, 865, 866, 5, 11, 0, 0, 866,
        867, 3, 16, 8, 0, 867, 868, 5, 12, 0, 0, 868, 889, 1, 0, 0, 0, 869, 876, 7, 10, 0, 0, 870,
        871, 3, 100, 50, 0, 871, 872, 3, 98, 49, 0, 872, 877, 1, 0, 0, 0, 873, 874, 3, 98, 49,
        0, 874, 875, 3, 100, 50, 0, 875, 877, 1, 0, 0, 0, 876, 870, 1, 0, 0, 0, 876, 873, 1, 0,
        0, 0, 877, 878, 1, 0, 0, 0, 878, 879, 3, 20, 10, 0, 879, 889, 1, 0, 0, 0, 880, 881, 5,
        37, 0, 0, 881, 882, 3, 86, 43, 0, 882, 883, 3, 20, 10, 0, 883, 889, 1, 0, 0, 0, 884, 886,
        5, 109, 0, 0, 885, 887, 3, 98, 49, 0, 886, 885, 1, 0, 0, 0, 886, 887, 1, 0, 0, 0, 887,
        889, 1, 0, 0, 0, 888, 751, 1, 0, 0, 0, 888, 789, 1, 0, 0, 0, 888, 827, 1, 0, 0, 0, 888,
        858, 1, 0, 0, 0, 888, 869, 1, 0, 0, 0, 888, 880, 1, 0, 0, 0, 888, 884, 1, 0, 0, 0, 889,
        83, 1, 0, 0, 0, 890, 891, 3, 16, 8, 0, 891, 892, 5, 106, 0, 0, 892, 893, 3, 84, 42, 0,
        893, 896, 1, 0, 0, 0, 894, 896, 3, 16, 8, 0, 895, 890, 1, 0, 0, 0, 895, 894, 1, 0, 0, 0,
        896, 85, 1, 0, 0, 0, 897, 898, 5, 102, 0, 0, 898, 899, 5, 11, 0, 0, 899, 900, 7, 11, 0,
        0, 900, 901, 5, 38, 0, 0, 901, 906, 3, 16, 8, 0, 902, 903, 5, 103, 0, 0, 903, 904, 5,
        11, 0, 0, 904, 905, 7, 2, 0, 0, 905, 907, 5, 12, 0, 0, 906, 902, 1, 0, 0, 0, 906, 907,
        1, 0, 0, 0, 907, 908, 1, 0, 0, 0, 908, 909, 5, 12, 0, 0, 909, 87, 1, 0, 0, 0, 910, 911,
        3, 16, 8, 0, 911, 89, 1, 0, 0, 0, 912, 913, 3, 22, 11, 0, 913, 91, 1, 0, 0, 0, 914, 920,
        3, 16, 8, 0, 915, 916, 3, 16, 8, 0, 916, 917, 5, 106, 0, 0, 917, 918, 3, 92, 46, 0, 918,
        920, 1, 0, 0, 0, 919, 914, 1, 0, 0, 0, 919, 915, 1, 0, 0, 0, 920, 93, 1, 0, 0, 0, 921, 922,
        3, 22, 11, 0, 922, 95, 1, 0, 0, 0, 923, 932, 5, 102, 0, 0, 924, 933, 3, 60, 30, 0, 925,
        928, 5, 11, 0, 0, 926, 929, 3, 16, 8, 0, 927, 929, 3, 84, 42, 0, 928, 926, 1, 0, 0, 0,
        928, 927, 1, 0, 0, 0, 929, 930, 1, 0, 0, 0, 930, 931, 5, 12, 0, 0, 931, 933, 1, 0, 0, 0,
        932, 924, 1, 0, 0, 0, 932, 925, 1, 0, 0, 0, 933, 97, 1, 0, 0, 0, 934, 940, 5, 103, 0, 0,
        935, 941, 3, 60, 30, 0, 936, 937, 5, 11, 0, 0, 937, 938, 3, 16, 8, 0, 938, 939, 5, 12,
        0, 0, 939, 941, 1, 0, 0, 0, 940, 935, 1, 0, 0, 0, 940, 936, 1, 0, 0, 0, 941, 99, 1, 0, 0,
        0, 942, 943, 5, 102, 0, 0, 943, 944, 5, 11, 0, 0, 944, 945, 3, 14, 7, 0, 945, 946, 5,
        12, 0, 0, 946, 101, 1, 0, 0, 0, 72, 106, 114, 124, 135, 251, 260, 270, 273, 289, 300,
        311, 319, 321, 329, 332, 338, 345, 350, 358, 364, 372, 386, 389, 393, 406, 409,
        413, 425, 435, 549, 599, 633, 667, 677, 687, 699, 709, 741, 749, 753, 756, 759,
        762, 764, 767, 772, 777, 782, 787, 791, 794, 797, 800, 802, 805, 810, 815, 820,
        825, 848, 851, 856, 863, 876, 886, 888, 895, 906, 919, 928, 932, 940
    ]


class LATEXParser (Parser):

    grammarFileName = "LATEX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "'\\$'", "'+'", "'-'", "'*'",
                    "'/'", "'('", "')'", "'\\lgroup'", "'\\rgroup'", "'{'",
                    "'}'", "'\\{'", "'\\}'", "'\\lbrace'", "'\\rbrace'",
                    "'['", "']'", "'\\lbrack'", "'\\rbrack'", "'|'", "'\\lvert'",
                    "'\\rvert'", "'\\vert'", "'\\lfloor'", "'\\rfloor'",
                    "'\\llcorner'", "'\\lrcorner'", "'\\lceil'", "'\\rceil'",
                    "'\\ulcorner'", "'\\urcorner'", "'\\left'", "'\\right'",
                    "'\\mleft'", "'\\mright'", "'\\lim'", "<INVALID>",
                    "'\\int'", "'\\sum'", "'\\prod'", "'\\log'", "'\\ln'",
                    "'\\exp'", "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'",
                    "'\\sec'", "'\\cot'", "'\\arcsin'", "'\\arccos'", "'\\arctan'",
                    "'\\arccsc'", "'\\arcsec'", "'\\arccot'", "'\\sinh'",
                    "'\\cosh'", "'\\tanh'", "'\\arsinh'", "'\\arcosh'",
                    "'\\artanh'", "'\\arcsinh'", "'\\arccosh'", "'\\arctanh'",
                    "'arsinh'", "'arcsinh'", "'arcosh'", "'arccosh'", "'artanh'",
                    "'arctanh'", "'gcd'", "'lcm'", "'floor'", "'ceil'",
                    "'\\sqrt'", "'\\gcd'", "'\\lcm'", "'\\floor'", "'\\ceil'",
                    "'\\max'", "'\\min'", "'\\times'", "'\\cdot'", "'\\div'",
                    "'\\frac'", "'\\binom'", "'\\choose'", "'\\mod'", "'\\mathit'",
                    "'\\operatorname'", "'matrix'", "'pmatrix'", "'bmatrix'",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "'\\\\'",
                    "'\\overline'", "'\\bar'", "'_'", "'^'", "':'", "';'",
                    "','", "'.'", "<INVALID>", "<INVALID>", "'E'", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "'='", "'<'", "<INVALID>", "'>'", "<INVALID>", "<INVALID>",
                    "'!'"]

    symbolicNames = ["<INVALID>", "WS", "DOLLAR_SIGN", "ADD", "SUB", "MUL",
                     "DIV", "L_PAREN", "R_PAREN", "L_GROUP", "R_GROUP",
                     "L_BRACE", "R_BRACE", "L_BRACE_VISUAL", "R_BRACE_VISUAL",
                     "L_BRACE_CMD", "R_BRACE_CMD", "L_BRACKET", "R_BRACKET",
                     "L_BRACK", "R_BRACK", "BAR", "L_VERT", "R_VERT", "VERT",
                     "L_FLOOR", "R_FLOOR", "LL_CORNER", "LR_CORNER", "L_CEIL",
                     "R_CEIL", "UL_CORNER", "UR_CORNER", "L_LEFT", "R_RIGHT",
                     "ML_LEFT", "MR_RIGHT", "FUNC_LIM", "LIM_APPROACH_SYM",
                     "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_LOG", "FUNC_LN",
                     "FUNC_EXP", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC",
                     "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS",
                     "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT",
                     "FUNC_SINH", "FUNC_COSH", "FUNC_TANH", "FUNC_ARSINH",
                     "FUNC_ARCOSH", "FUNC_ARTANH", "FUNC_ARCSINH", "FUNC_ARCCOSH",
                     "FUNC_ARCTANH", "FUNC_ARSINH_NAME", "FUNC_ARCSINH_NAME",
                     "FUNC_ARCOSH_NAME", "FUNC_ARCCOSH_NAME", "FUNC_ARTANH_NAME",
                     "FUNC_ARCTANH_NAME", "FUNC_GCD_NAME", "FUNC_LCM_NAME",
                     "FUNC_FLOOR_NAME", "FUNC_CEIL_NAME", "FUNC_SQRT",
                     "FUNC_GCD", "FUNC_LCM", "FUNC_FLOOR", "FUNC_CEIL",
                     "FUNC_MAX", "FUNC_MIN", "CMD_TIMES", "CMD_CDOT", "CMD_DIV",
                     "CMD_FRAC", "CMD_BINOM", "CMD_CHOOSE", "CMD_MOD",
                     "CMD_MATHIT", "CMD_OPERATORNAME", "MATRIX_TYPE_MATRIX",
                     "MATRIX_TYPE_PMATRIX", "MATRIX_TYPE_BMATRIX", "MATRIX_TYPES",
                     "CMD_MATRIX_START", "CMD_MATRIX_END", "MATRIX_DEL_COL",
                     "MATRIX_DEL_ROW", "ACCENT_OVERLINE", "ACCENT_BAR",
                     "UNDERSCORE", "CARET", "COLON", "SEMICOLON", "COMMA",
                     "PERIOD", "DIFFERENTIAL", "EXP_E", "E_NOTATION_E",
                     "LETTER_NO_E", "NUMBER", "FRACTION_NUMBER", "SCI_NOTATION_NUMBER",
                     "E_NOTATION", "EQUAL", "LT", "LTE", "GT", "GTE", "UNEQUAL",
                     "BANG", "PERCENT_NUMBER", "GREEK_CMD", "SYMBOL", "VARIABLE"]

    RULE_accent_symbol = 0
    RULE_math = 1
    RULE_matrix = 2
    RULE_matrix_row = 3
    RULE_relation = 4
    RULE_relation_list = 5
    RULE_relation_list_content = 6
    RULE_equality = 7
    RULE_expr = 8
    RULE_additive = 9
    RULE_mp = 10
    RULE_mp_nofunc = 11
    RULE_unary = 12
    RULE_unary_nofunc = 13
    RULE_postfix = 14
    RULE_postfix_nofunc = 15
    RULE_postfix_op = 16
    RULE_eval_at = 17
    RULE_eval_at_sub = 18
    RULE_eval_at_sup = 19
    RULE_exp = 20
    RULE_exp_nofunc = 21
    RULE_comp = 22
    RULE_comp_nofunc = 23
    RULE_group = 24
    RULE_abs_group = 25
    RULE_floor_group = 26
    RULE_ceil_group = 27
    RULE_accent = 28
    RULE_atom_expr = 29
    RULE_atom = 30
    RULE_mathit = 31
    RULE_mathit_text = 32
    RULE_frac = 33
    RULE_binom = 34
    RULE_func_normal_functions_single_arg = 35
    RULE_func_normal_functions_multi_arg = 36
    RULE_func_operator_names_single_arg = 37
    RULE_func_operator_names_multi_arg = 38
    RULE_func_normal_single_arg = 39
    RULE_func_normal_multi_arg = 40
    RULE_func = 41
    RULE_args = 42
    RULE_limit_sub = 43
    RULE_func_single_arg = 44
    RULE_func_single_arg_noparens = 45
    RULE_func_multi_arg = 46
    RULE_func_multi_arg_noparens = 47
    RULE_subexpr = 48
    RULE_supexpr = 49
    RULE_subeq = 50

    ruleNames = ["accent_symbol", "math", "matrix", "matrix_row", "relation",
                 "relation_list", "relation_list_content", "equality",
                 "expr", "additive", "mp", "mp_nofunc", "unary", "unary_nofunc",
                 "postfix", "postfix_nofunc", "postfix_op", "eval_at",
                 "eval_at_sub", "eval_at_sup", "exp", "exp_nofunc", "comp",
                 "comp_nofunc", "group", "abs_group", "floor_group", "ceil_group",
                 "accent", "atom_expr", "atom", "mathit", "mathit_text",
                 "frac", "binom", "func_normal_functions_single_arg",
                 "func_normal_functions_multi_arg", "func_operator_names_single_arg",
                 "func_operator_names_multi_arg", "func_normal_single_arg",
                 "func_normal_multi_arg", "func", "args", "limit_sub",
                 "func_single_arg", "func_single_arg_noparens", "func_multi_arg",
                 "func_multi_arg_noparens", "subexpr", "supexpr", "subeq"]

    EOF = Token.EOF
    WS = 1
    DOLLAR_SIGN = 2
    ADD = 3
    SUB = 4
    MUL = 5
    DIV = 6
    L_PAREN = 7
    R_PAREN = 8
    L_GROUP = 9
    R_GROUP = 10
    L_BRACE = 11
    R_BRACE = 12
    L_BRACE_VISUAL = 13
    R_BRACE_VISUAL = 14
    L_BRACE_CMD = 15
    R_BRACE_CMD = 16
    L_BRACKET = 17
    R_BRACKET = 18
    L_BRACK = 19
    R_BRACK = 20
    BAR = 21
    L_VERT = 22
    R_VERT = 23
    VERT = 24
    L_FLOOR = 25
    R_FLOOR = 26
    LL_CORNER = 27
    LR_CORNER = 28
    L_CEIL = 29
    R_CEIL = 30
    UL_CORNER = 31
    UR_CORNER = 32
    L_LEFT = 33
    R_RIGHT = 34
    ML_LEFT = 35
    MR_RIGHT = 36
    FUNC_LIM = 37
    LIM_APPROACH_SYM = 38
    FUNC_INT = 39
    FUNC_SUM = 40
    FUNC_PROD = 41
    FUNC_LOG = 42
    FUNC_LN = 43
    FUNC_EXP = 44
    FUNC_SIN = 45
    FUNC_COS = 46
    FUNC_TAN = 47
    FUNC_CSC = 48
    FUNC_SEC = 49
    FUNC_COT = 50
    FUNC_ARCSIN = 51
    FUNC_ARCCOS = 52
    FUNC_ARCTAN = 53
    FUNC_ARCCSC = 54
    FUNC_ARCSEC = 55
    FUNC_ARCCOT = 56
    FUNC_SINH = 57
    FUNC_COSH = 58
    FUNC_TANH = 59
    FUNC_ARSINH = 60
    FUNC_ARCOSH = 61
    FUNC_ARTANH = 62
    FUNC_ARCSINH = 63
    FUNC_ARCCOSH = 64
    FUNC_ARCTANH = 65
    FUNC_ARSINH_NAME = 66
    FUNC_ARCSINH_NAME = 67
    FUNC_ARCOSH_NAME = 68
    FUNC_ARCCOSH_NAME = 69
    FUNC_ARTANH_NAME = 70
    FUNC_ARCTANH_NAME = 71
    FUNC_GCD_NAME = 72
    FUNC_LCM_NAME = 73
    FUNC_FLOOR_NAME = 74
    FUNC_CEIL_NAME = 75
    FUNC_SQRT = 76
    FUNC_GCD = 77
    FUNC_LCM = 78
    FUNC_FLOOR = 79
    FUNC_CEIL = 80
    FUNC_MAX = 81
    FUNC_MIN = 82
    CMD_TIMES = 83
    CMD_CDOT = 84
    CMD_DIV = 85
    CMD_FRAC = 86
    CMD_BINOM = 87
    CMD_CHOOSE = 88
    CMD_MOD = 89
    CMD_MATHIT = 90
    CMD_OPERATORNAME = 91
    MATRIX_TYPE_MATRIX = 92
    MATRIX_TYPE_PMATRIX = 93
    MATRIX_TYPE_BMATRIX = 94
    MATRIX_TYPES = 95
    CMD_MATRIX_START = 96
    CMD_MATRIX_END = 97
    MATRIX_DEL_COL = 98
    MATRIX_DEL_ROW = 99
    ACCENT_OVERLINE = 100
    ACCENT_BAR = 101
    UNDERSCORE = 102
    CARET = 103
    COLON = 104
    SEMICOLON = 105
    COMMA = 106
    PERIOD = 107
    DIFFERENTIAL = 108
    EXP_E = 109
    E_NOTATION_E = 110
    LETTER_NO_E = 111
    NUMBER = 112
    FRACTION_NUMBER = 113
    SCI_NOTATION_NUMBER = 114
    E_NOTATION = 115
    EQUAL = 116
    LT = 117
    LTE = 118
    GT = 119
    GTE = 120
    UNEQUAL = 121
    BANG = 122
    PERCENT_NUMBER = 123
    GREEK_CMD = 124
    SYMBOL = 125
    VARIABLE = 126

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class Accent_symbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCENT_BAR(self):
            return self.getToken(LATEXParser.ACCENT_BAR, 0)

        def ACCENT_OVERLINE(self):
            return self.getToken(LATEXParser.ACCENT_OVERLINE, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_accent_symbol

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccent_symbol"):
                listener.enterAccent_symbol(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccent_symbol"):
                listener.exitAccent_symbol(self)

    def accent_symbol(self):

        localctx = LATEXParser.Accent_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_accent_symbol)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 102
            _la = self._input.LA(1)
            if not (_la == 100 or _la == 101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LATEXParser.RelationContext, 0)

        def relation_list(self):
            return self.getTypedRuleContext(LATEXParser.Relation_listContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_math

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMath"):
                listener.enterMath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMath"):
                listener.exitMath(self)

    def math(self):

        localctx = LATEXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_math)
        try:
            self.state = 106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 104
                self.relation(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 105
                self.relation_list()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATRIX_START(self):
            return self.getToken(LATEXParser.CMD_MATRIX_START, 0)

        def matrix_row(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LATEXParser.Matrix_rowContext, i)

        def CMD_MATRIX_END(self):
            return self.getToken(LATEXParser.CMD_MATRIX_END, 0)

        def MATRIX_DEL_ROW(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.MATRIX_DEL_ROW)
            else:
                return self.getToken(LATEXParser.MATRIX_DEL_ROW, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_matrix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatrix"):
                listener.enterMatrix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatrix"):
                listener.exitMatrix(self)

    def matrix(self):

        localctx = LATEXParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_matrix)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 108
            self.match(LATEXParser.CMD_MATRIX_START)
            self.state = 109
            self.matrix_row()
            self.state = 114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 99:
                self.state = 110
                self.match(LATEXParser.MATRIX_DEL_ROW)
                self.state = 111
                self.matrix_row()
                self.state = 116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 117
            self.match(LATEXParser.CMD_MATRIX_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LATEXParser.ExprContext, i)

        def MATRIX_DEL_COL(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.MATRIX_DEL_COL)
            else:
                return self.getToken(LATEXParser.MATRIX_DEL_COL, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_matrix_row

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMatrix_row"):
                listener.enterMatrix_row(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMatrix_row"):
                listener.exitMatrix_row(self)

    def matrix_row(self):

        localctx = LATEXParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_matrix_row)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119
            self.expr()
            self.state = 124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 98:
                self.state = 120
                self.match(LATEXParser.MATRIX_DEL_COL)
                self.state = 121
                self.expr()
                self.state = 126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def relation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LATEXParser.RelationContext, i)

        def EQUAL(self):
            return self.getToken(LATEXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LATEXParser.LT, 0)

        def LTE(self):
            return self.getToken(LATEXParser.LTE, 0)

        def GT(self):
            return self.getToken(LATEXParser.GT, 0)

        def GTE(self):
            return self.getToken(LATEXParser.GTE, 0)

        def UNEQUAL(self):
            return self.getToken(LATEXParser.UNEQUAL, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_relation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation"):
                listener.enterRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation"):
                listener.exitRelation(self)

    def relation(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_relation, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 135
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 130
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 131
                    _la = self._input.LA(1)
                    if not ((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 63) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 132
                    self.relation(3)
                self.state = 137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Relation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation_list_content(self):
            return self.getTypedRuleContext(LATEXParser.Relation_list_contentContext, 0)

        def L_PAREN(self):
            return self.getToken(LATEXParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(LATEXParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(LATEXParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(LATEXParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(LATEXParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(LATEXParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(LATEXParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(LATEXParser.R_BRACE_CMD, 0)

        def L_BRACKET(self):
            return self.getToken(LATEXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LATEXParser.R_BRACKET, 0)

        def L_BRACK(self):
            return self.getToken(LATEXParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(LATEXParser.R_BRACK, 0)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_relation_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation_list"):
                listener.enterRelation_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation_list"):
                listener.exitRelation_list(self)

    def relation_list(self):

        localctx = LATEXParser.Relation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_relation_list)
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 138
                self.relation_list_content()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 139
                self.match(LATEXParser.L_PAREN)
                self.state = 140
                self.relation_list_content()
                self.state = 141
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 143
                self.match(LATEXParser.L_GROUP)
                self.state = 144
                self.relation_list_content()
                self.state = 145
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 147
                self.match(LATEXParser.L_BRACE)
                self.state = 148
                self.relation_list_content()
                self.state = 149
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 151
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 152
                self.relation_list_content()
                self.state = 153
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 155
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 156
                self.relation_list_content()
                self.state = 157
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 159
                self.match(LATEXParser.L_BRACKET)
                self.state = 160
                self.relation_list_content()
                self.state = 161
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 163
                self.match(LATEXParser.L_BRACK)
                self.state = 164
                self.relation_list_content()
                self.state = 165
                self.match(LATEXParser.R_BRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 167
                self.match(LATEXParser.L_LEFT)
                self.state = 168
                self.match(LATEXParser.L_PAREN)
                self.state = 169
                self.relation_list_content()
                self.state = 170
                self.match(LATEXParser.R_RIGHT)
                self.state = 171
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 173
                self.match(LATEXParser.L_LEFT)
                self.state = 174
                self.match(LATEXParser.L_GROUP)
                self.state = 175
                self.relation_list_content()
                self.state = 176
                self.match(LATEXParser.R_RIGHT)
                self.state = 177
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 179
                self.match(LATEXParser.L_LEFT)
                self.state = 180
                self.match(LATEXParser.L_BRACE)
                self.state = 181
                self.relation_list_content()
                self.state = 182
                self.match(LATEXParser.R_RIGHT)
                self.state = 183
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 185
                self.match(LATEXParser.L_LEFT)
                self.state = 186
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 187
                self.relation_list_content()
                self.state = 188
                self.match(LATEXParser.R_RIGHT)
                self.state = 189
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 191
                self.match(LATEXParser.L_LEFT)
                self.state = 192
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 193
                self.relation_list_content()
                self.state = 194
                self.match(LATEXParser.R_RIGHT)
                self.state = 195
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 197
                self.match(LATEXParser.L_LEFT)
                self.state = 198
                self.match(LATEXParser.L_BRACKET)
                self.state = 199
                self.relation_list_content()
                self.state = 200
                self.match(LATEXParser.R_RIGHT)
                self.state = 201
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 203
                self.match(LATEXParser.L_LEFT)
                self.state = 204
                self.match(LATEXParser.L_BRACK)
                self.state = 205
                self.relation_list_content()
                self.state = 206
                self.match(LATEXParser.R_RIGHT)
                self.state = 207
                self.match(LATEXParser.R_BRACK)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 209
                self.match(LATEXParser.ML_LEFT)
                self.state = 210
                self.match(LATEXParser.L_PAREN)
                self.state = 211
                self.relation_list_content()
                self.state = 212
                self.match(LATEXParser.MR_RIGHT)
                self.state = 213
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 215
                self.match(LATEXParser.ML_LEFT)
                self.state = 216
                self.match(LATEXParser.L_GROUP)
                self.state = 217
                self.relation_list_content()
                self.state = 218
                self.match(LATEXParser.MR_RIGHT)
                self.state = 219
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 221
                self.match(LATEXParser.ML_LEFT)
                self.state = 222
                self.match(LATEXParser.L_BRACE)
                self.state = 223
                self.relation_list_content()
                self.state = 224
                self.match(LATEXParser.MR_RIGHT)
                self.state = 225
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 227
                self.match(LATEXParser.ML_LEFT)
                self.state = 228
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 229
                self.relation_list_content()
                self.state = 230
                self.match(LATEXParser.MR_RIGHT)
                self.state = 231
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 233
                self.match(LATEXParser.ML_LEFT)
                self.state = 234
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 235
                self.relation_list_content()
                self.state = 236
                self.match(LATEXParser.MR_RIGHT)
                self.state = 237
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 239
                self.match(LATEXParser.ML_LEFT)
                self.state = 240
                self.match(LATEXParser.L_BRACKET)
                self.state = 241
                self.relation_list_content()
                self.state = 242
                self.match(LATEXParser.MR_RIGHT)
                self.state = 243
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 245
                self.match(LATEXParser.ML_LEFT)
                self.state = 246
                self.match(LATEXParser.L_BRACK)
                self.state = 247
                self.relation_list_content()
                self.state = 248
                self.match(LATEXParser.MR_RIGHT)
                self.state = 249
                self.match(LATEXParser.R_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relation_list_contentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LATEXParser.RelationContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.COMMA)
            else:
                return self.getToken(LATEXParser.COMMA, i)

        def SEMICOLON(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.SEMICOLON)
            else:
                return self.getToken(LATEXParser.SEMICOLON, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_relation_list_content

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation_list_content"):
                listener.enterRelation_list_content(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation_list_content"):
                listener.exitRelation_list_content(self)

    def relation_list_content(self):

        localctx = LATEXParser.Relation_list_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_relation_list_content)
        self._la = 0  # Token type
        try:
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.relation(0)
                self.state = 254
                self.match(LATEXParser.COMMA)
                self.state = 255
                self.relation(0)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 106:
                    self.state = 256
                    self.match(LATEXParser.COMMA)
                    self.state = 257
                    self.relation(0)
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.relation(0)
                self.state = 264
                self.match(LATEXParser.SEMICOLON)
                self.state = 265
                self.relation(0)
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 105:
                    self.state = 266
                    self.match(LATEXParser.SEMICOLON)
                    self.state = 267
                    self.relation(0)
                    self.state = 272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LATEXParser.ExprContext, i)

        def EQUAL(self):
            return self.getToken(LATEXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_equality

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEquality"):
                listener.enterEquality(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEquality"):
                listener.exitEquality(self)

    def equality(self):

        localctx = LATEXParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.expr()
            self.state = 276
            self.match(LATEXParser.EQUAL)
            self.state = 277
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(LATEXParser.AdditiveContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)

    def expr(self):

        localctx = LATEXParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LATEXParser.MpContext, 0)

        def additive(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LATEXParser.AdditiveContext, i)

        def ADD(self):
            return self.getToken(LATEXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LATEXParser.SUB, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_additive

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditive"):
                listener.enterAdditive(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditive"):
                listener.exitAdditive(self)

    def additive(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_additive, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 284
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 285
                    _la = self._input.LA(1)
                    if not (_la == 3 or _la == 4):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 286
                    self.additive(3)
                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LATEXParser.UnaryContext, 0)

        def mp(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.MpContext)
            else:
                return self.getTypedRuleContext(LATEXParser.MpContext, i)

        def MUL(self):
            return self.getToken(LATEXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LATEXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LATEXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LATEXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LATEXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LATEXParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(LATEXParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_mp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMp"):
                listener.enterMp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMp"):
                listener.exitMp(self)

    def mp(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_mp, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 300
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 295
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 296
                    _la = self._input.LA(1)
                    if not (_la == 5 or _la == 6 or (((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2097223) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 297
                    self.mp(3)
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Unary_nofuncContext, 0)

        def mp_nofunc(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(LATEXParser.Mp_nofuncContext, i)

        def MUL(self):
            return self.getToken(LATEXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LATEXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LATEXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LATEXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LATEXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LATEXParser.COLON, 0)

        def CMD_MOD(self):
            return self.getToken(LATEXParser.CMD_MOD, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_mp_nofunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMp_nofunc"):
                listener.enterMp_nofunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMp_nofunc"):
                listener.exitMp_nofunc(self)

    def mp_nofunc(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_mp_nofunc, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 306
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 307
                    _la = self._input.LA(1)
                    if not (_la == 5 or _la == 6 or (((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2097223) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 308
                    self.mp_nofunc(3)
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LATEXParser.UnaryContext, 0)

        def ADD(self):
            return self.getToken(LATEXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LATEXParser.SUB, 0)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LATEXParser.PostfixContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_unary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary"):
                listener.enterUnary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary"):
                listener.exitUnary(self)

    def unary(self):

        localctx = LATEXParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unary)
        self._la = 0  # Token type
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                _la = self._input.LA(1)
                if not (_la == 3 or _la == 4):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 315
                self.unary()
                pass
            elif token in [7, 9, 11, 13, 15, 17, 19, 21, 22, 24, 25, 27, 29, 31, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 90, 91, 96, 100, 101, 108, 109, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 316
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Unary_nofuncContext, 0)

        def ADD(self):
            return self.getToken(LATEXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LATEXParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LATEXParser.PostfixContext, 0)

        def postfix_nofunc(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(LATEXParser.Postfix_nofuncContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_unary_nofunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnary_nofunc"):
                listener.enterUnary_nofunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnary_nofunc"):
                listener.exitUnary_nofunc(self)

    def unary_nofunc(self):

        localctx = LATEXParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unary_nofunc)
        self._la = 0  # Token type
        try:
            self.state = 332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                _la = self._input.LA(1)
                if not (_la == 3 or _la == 4):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 324
                self.unary_nofunc()
                pass
            elif token in [7, 9, 11, 13, 15, 17, 19, 21, 22, 24, 25, 27, 29, 31, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 90, 91, 96, 100, 101, 108, 109, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.postfix()
                self.state = 329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 326
                        self.postfix_nofunc()
                    self.state = 331
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LATEXParser.ExpContext, 0)

        def postfix_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LATEXParser.Postfix_opContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_postfix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfix"):
                listener.enterPostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfix"):
                listener.exitPostfix(self)

    def postfix(self):

        localctx = LATEXParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.exp(0)
            self.state = 338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 335
                    self.postfix_op()
                self.state = 340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Exp_nofuncContext, 0)

        def postfix_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LATEXParser.Postfix_opContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_postfix_nofunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfix_nofunc"):
                listener.enterPostfix_nofunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfix_nofunc"):
                listener.exitPostfix_nofunc(self)

    def postfix_nofunc(self):

        localctx = LATEXParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.exp_nofunc(0)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 342
                    self.postfix_op()
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LATEXParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LATEXParser.Eval_atContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_postfix_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfix_op"):
                listener.enterPostfix_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfix_op"):
                listener.exitPostfix_op(self)

    def postfix_op(self):

        localctx = LATEXParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_postfix_op)
        try:
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.enterOuterAlt(localctx, 1)
                self.state = 348
                self.match(LATEXParser.BANG)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.eval_at()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LATEXParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LATEXParser.Eval_at_supContext, 0)

        def eval_at_sub(self):
            return self.getTypedRuleContext(LATEXParser.Eval_at_subContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_eval_at

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEval_at"):
                listener.enterEval_at(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEval_at"):
                listener.exitEval_at(self)

    def eval_at(self):

        localctx = LATEXParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(LATEXParser.BAR)
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.state = 353
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 354
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 355
                self.eval_at_sup()
                self.state = 356
                self.eval_at_sub()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LATEXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def equality(self):
            return self.getTypedRuleContext(LATEXParser.EqualityContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_eval_at_sub

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEval_at_sub"):
                listener.enterEval_at_sub(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEval_at_sub"):
                listener.exitEval_at_sub(self)

    def eval_at_sub(self):

        localctx = LATEXParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(LATEXParser.UNDERSCORE)
            self.state = 361
            self.match(LATEXParser.L_BRACE)
            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
            if la_ == 1:
                self.state = 362
                self.expr()
                pass

            elif la_ == 2:
                self.state = 363
                self.equality()
                pass

            self.state = 366
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def equality(self):
            return self.getTypedRuleContext(LATEXParser.EqualityContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_eval_at_sup

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEval_at_sup"):
                listener.enterEval_at_sup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEval_at_sup"):
                listener.exitEval_at_sup(self)

    def eval_at_sup(self):

        localctx = LATEXParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(LATEXParser.CARET)
            self.state = 369
            self.match(LATEXParser.L_BRACE)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.state = 370
                self.expr()
                pass

            elif la_ == 2:
                self.state = 371
                self.equality()
                pass

            self.state = 374
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LATEXParser.CompContext, 0)

        def exp(self):
            return self.getTypedRuleContext(LATEXParser.ExpContext, 0)

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LATEXParser.SubexprContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_exp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExp"):
                listener.enterExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExp"):
                listener.exitExp(self)

    def exp(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 393
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 379
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 380
                    self.match(LATEXParser.CARET)
                    self.state = 386
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [90, 100, 101, 108, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                        self.state = 381
                        self.atom()
                        pass
                    elif token in [11]:
                        self.state = 382
                        self.match(LATEXParser.L_BRACE)
                        self.state = 383
                        self.expr()
                        self.state = 384
                        self.match(LATEXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 389
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                    if la_ == 1:
                        self.state = 388
                        self.subexpr()

                self.state = 395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Comp_nofuncContext, 0)

        def exp_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Exp_nofuncContext, 0)

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LATEXParser.SubexprContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_exp_nofunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExp_nofunc"):
                listener.enterExp_nofunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExp_nofunc"):
                listener.exitExp_nofunc(self)

    def exp_nofunc(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LATEXParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 413
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LATEXParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 399
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 400
                    self.match(LATEXParser.CARET)
                    self.state = 406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [90, 100, 101, 108, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                        self.state = 401
                        self.atom()
                        pass
                    elif token in [11]:
                        self.state = 402
                        self.match(LATEXParser.L_BRACE)
                        self.state = 403
                        self.expr()
                        self.state = 404
                        self.match(LATEXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 409
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
                    if la_ == 1:
                        self.state = 408
                        self.subexpr()

                self.state = 415
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LATEXParser.GroupContext, 0)

        def abs_group(self):
            return self.getTypedRuleContext(LATEXParser.Abs_groupContext, 0)

        def floor_group(self):
            return self.getTypedRuleContext(LATEXParser.Floor_groupContext, 0)

        def ceil_group(self):
            return self.getTypedRuleContext(LATEXParser.Ceil_groupContext, 0)

        def func(self):
            return self.getTypedRuleContext(LATEXParser.FuncContext, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def frac(self):
            return self.getTypedRuleContext(LATEXParser.FracContext, 0)

        def binom(self):
            return self.getTypedRuleContext(LATEXParser.BinomContext, 0)

        def matrix(self):
            return self.getTypedRuleContext(LATEXParser.MatrixContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_comp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp"):
                listener.enterComp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp"):
                listener.exitComp(self)

    def comp(self):

        localctx = LATEXParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_comp)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.floor_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.ceil_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.func()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 421
                self.atom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 422
                self.frac()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 423
                self.binom()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 424
                self.matrix()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LATEXParser.GroupContext, 0)

        def abs_group(self):
            return self.getTypedRuleContext(LATEXParser.Abs_groupContext, 0)

        def floor_group(self):
            return self.getTypedRuleContext(LATEXParser.Floor_groupContext, 0)

        def ceil_group(self):
            return self.getTypedRuleContext(LATEXParser.Ceil_groupContext, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def frac(self):
            return self.getTypedRuleContext(LATEXParser.FracContext, 0)

        def binom(self):
            return self.getTypedRuleContext(LATEXParser.BinomContext, 0)

        def matrix(self):
            return self.getTypedRuleContext(LATEXParser.MatrixContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_comp_nofunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComp_nofunc"):
                listener.enterComp_nofunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComp_nofunc"):
                listener.exitComp_nofunc(self)

    def comp_nofunc(self):

        localctx = LATEXParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_comp_nofunc)
        try:
            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.floor_group()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.ceil_group()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.atom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.frac()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.binom()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.matrix()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LATEXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_PAREN(self):
            return self.getToken(LATEXParser.R_PAREN, 0)

        def L_GROUP(self):
            return self.getToken(LATEXParser.L_GROUP, 0)

        def R_GROUP(self):
            return self.getToken(LATEXParser.R_GROUP, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def L_BRACE_VISUAL(self):
            return self.getToken(LATEXParser.L_BRACE_VISUAL, 0)

        def R_BRACE_VISUAL(self):
            return self.getToken(LATEXParser.R_BRACE_VISUAL, 0)

        def L_BRACE_CMD(self):
            return self.getToken(LATEXParser.L_BRACE_CMD, 0)

        def R_BRACE_CMD(self):
            return self.getToken(LATEXParser.R_BRACE_CMD, 0)

        def L_BRACKET(self):
            return self.getToken(LATEXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LATEXParser.R_BRACKET, 0)

        def L_BRACK(self):
            return self.getToken(LATEXParser.L_BRACK, 0)

        def R_BRACK(self):
            return self.getToken(LATEXParser.R_BRACK, 0)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_group

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroup"):
                listener.enterGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroup"):
                listener.exitGroup(self)

    def group(self):

        localctx = LATEXParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_group)
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.match(LATEXParser.L_PAREN)
                self.state = 438
                self.expr()
                self.state = 439
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.match(LATEXParser.L_GROUP)
                self.state = 442
                self.expr()
                self.state = 443
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.match(LATEXParser.L_BRACE)
                self.state = 446
                self.expr()
                self.state = 447
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 449
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 450
                self.expr()
                self.state = 451
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 453
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 454
                self.expr()
                self.state = 455
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 457
                self.match(LATEXParser.L_BRACKET)
                self.state = 458
                self.expr()
                self.state = 459
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 461
                self.match(LATEXParser.L_BRACK)
                self.state = 462
                self.expr()
                self.state = 463
                self.match(LATEXParser.R_BRACK)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 465
                self.match(LATEXParser.L_LEFT)
                self.state = 466
                self.match(LATEXParser.L_PAREN)
                self.state = 467
                self.expr()
                self.state = 468
                self.match(LATEXParser.R_RIGHT)
                self.state = 469
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 471
                self.match(LATEXParser.L_LEFT)
                self.state = 472
                self.match(LATEXParser.L_GROUP)
                self.state = 473
                self.expr()
                self.state = 474
                self.match(LATEXParser.R_RIGHT)
                self.state = 475
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 477
                self.match(LATEXParser.L_LEFT)
                self.state = 478
                self.match(LATEXParser.L_BRACE)
                self.state = 479
                self.expr()
                self.state = 480
                self.match(LATEXParser.R_RIGHT)
                self.state = 481
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 483
                self.match(LATEXParser.L_LEFT)
                self.state = 484
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 485
                self.expr()
                self.state = 486
                self.match(LATEXParser.R_RIGHT)
                self.state = 487
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 489
                self.match(LATEXParser.L_LEFT)
                self.state = 490
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 491
                self.expr()
                self.state = 492
                self.match(LATEXParser.R_RIGHT)
                self.state = 493
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 495
                self.match(LATEXParser.L_LEFT)
                self.state = 496
                self.match(LATEXParser.L_BRACKET)
                self.state = 497
                self.expr()
                self.state = 498
                self.match(LATEXParser.R_RIGHT)
                self.state = 499
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 501
                self.match(LATEXParser.L_LEFT)
                self.state = 502
                self.match(LATEXParser.L_BRACK)
                self.state = 503
                self.expr()
                self.state = 504
                self.match(LATEXParser.R_RIGHT)
                self.state = 505
                self.match(LATEXParser.R_BRACK)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 507
                self.match(LATEXParser.ML_LEFT)
                self.state = 508
                self.match(LATEXParser.L_PAREN)
                self.state = 509
                self.expr()
                self.state = 510
                self.match(LATEXParser.MR_RIGHT)
                self.state = 511
                self.match(LATEXParser.R_PAREN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 513
                self.match(LATEXParser.ML_LEFT)
                self.state = 514
                self.match(LATEXParser.L_GROUP)
                self.state = 515
                self.expr()
                self.state = 516
                self.match(LATEXParser.MR_RIGHT)
                self.state = 517
                self.match(LATEXParser.R_GROUP)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 519
                self.match(LATEXParser.ML_LEFT)
                self.state = 520
                self.match(LATEXParser.L_BRACE)
                self.state = 521
                self.expr()
                self.state = 522
                self.match(LATEXParser.MR_RIGHT)
                self.state = 523
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 525
                self.match(LATEXParser.ML_LEFT)
                self.state = 526
                self.match(LATEXParser.L_BRACE_VISUAL)
                self.state = 527
                self.expr()
                self.state = 528
                self.match(LATEXParser.MR_RIGHT)
                self.state = 529
                self.match(LATEXParser.R_BRACE_VISUAL)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 531
                self.match(LATEXParser.ML_LEFT)
                self.state = 532
                self.match(LATEXParser.L_BRACE_CMD)
                self.state = 533
                self.expr()
                self.state = 534
                self.match(LATEXParser.MR_RIGHT)
                self.state = 535
                self.match(LATEXParser.R_BRACE_CMD)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 537
                self.match(LATEXParser.ML_LEFT)
                self.state = 538
                self.match(LATEXParser.L_BRACKET)
                self.state = 539
                self.expr()
                self.state = 540
                self.match(LATEXParser.MR_RIGHT)
                self.state = 541
                self.match(LATEXParser.R_BRACKET)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 543
                self.match(LATEXParser.ML_LEFT)
                self.state = 544
                self.match(LATEXParser.L_BRACK)
                self.state = 545
                self.expr()
                self.state = 546
                self.match(LATEXParser.MR_RIGHT)
                self.state = 547
                self.match(LATEXParser.R_BRACK)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.BAR)
            else:
                return self.getToken(LATEXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def L_VERT(self):
            return self.getToken(LATEXParser.L_VERT, 0)

        def R_VERT(self):
            return self.getToken(LATEXParser.R_VERT, 0)

        def VERT(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.VERT)
            else:
                return self.getToken(LATEXParser.VERT, i)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_abs_group

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbs_group"):
                listener.enterAbs_group(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbs_group"):
                listener.exitAbs_group(self)

    def abs_group(self):

        localctx = LATEXParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_abs_group)
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.match(LATEXParser.BAR)
                self.state = 552
                self.expr()
                self.state = 553
                self.match(LATEXParser.BAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(LATEXParser.L_VERT)
                self.state = 556
                self.expr()
                self.state = 557
                self.match(LATEXParser.R_VERT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 559
                self.match(LATEXParser.VERT)
                self.state = 560
                self.expr()
                self.state = 561
                self.match(LATEXParser.VERT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 563
                self.match(LATEXParser.L_LEFT)
                self.state = 564
                self.match(LATEXParser.BAR)
                self.state = 565
                self.expr()
                self.state = 566
                self.match(LATEXParser.R_RIGHT)
                self.state = 567
                self.match(LATEXParser.BAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.match(LATEXParser.L_LEFT)
                self.state = 570
                self.match(LATEXParser.L_VERT)
                self.state = 571
                self.expr()
                self.state = 572
                self.match(LATEXParser.R_RIGHT)
                self.state = 573
                self.match(LATEXParser.R_VERT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 575
                self.match(LATEXParser.L_LEFT)
                self.state = 576
                self.match(LATEXParser.VERT)
                self.state = 577
                self.expr()
                self.state = 578
                self.match(LATEXParser.R_RIGHT)
                self.state = 579
                self.match(LATEXParser.VERT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 581
                self.match(LATEXParser.ML_LEFT)
                self.state = 582
                self.match(LATEXParser.BAR)
                self.state = 583
                self.expr()
                self.state = 584
                self.match(LATEXParser.MR_RIGHT)
                self.state = 585
                self.match(LATEXParser.BAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 587
                self.match(LATEXParser.ML_LEFT)
                self.state = 588
                self.match(LATEXParser.L_VERT)
                self.state = 589
                self.expr()
                self.state = 590
                self.match(LATEXParser.MR_RIGHT)
                self.state = 591
                self.match(LATEXParser.R_VERT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 593
                self.match(LATEXParser.ML_LEFT)
                self.state = 594
                self.match(LATEXParser.VERT)
                self.state = 595
                self.expr()
                self.state = 596
                self.match(LATEXParser.MR_RIGHT)
                self.state = 597
                self.match(LATEXParser.VERT)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Floor_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_FLOOR(self):
            return self.getToken(LATEXParser.L_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_FLOOR(self):
            return self.getToken(LATEXParser.R_FLOOR, 0)

        def LL_CORNER(self):
            return self.getToken(LATEXParser.LL_CORNER, 0)

        def LR_CORNER(self):
            return self.getToken(LATEXParser.LR_CORNER, 0)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_floor_group

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFloor_group"):
                listener.enterFloor_group(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFloor_group"):
                listener.exitFloor_group(self)

    def floor_group(self):

        localctx = LATEXParser.Floor_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_floor_group)
        try:
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.match(LATEXParser.L_FLOOR)
                self.state = 602
                self.expr()
                self.state = 603
                self.match(LATEXParser.R_FLOOR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(LATEXParser.LL_CORNER)
                self.state = 606
                self.expr()
                self.state = 607
                self.match(LATEXParser.LR_CORNER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.match(LATEXParser.L_LEFT)
                self.state = 610
                self.match(LATEXParser.L_FLOOR)
                self.state = 611
                self.expr()
                self.state = 612
                self.match(LATEXParser.R_RIGHT)
                self.state = 613
                self.match(LATEXParser.R_FLOOR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 615
                self.match(LATEXParser.L_LEFT)
                self.state = 616
                self.match(LATEXParser.LL_CORNER)
                self.state = 617
                self.expr()
                self.state = 618
                self.match(LATEXParser.R_RIGHT)
                self.state = 619
                self.match(LATEXParser.LR_CORNER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 621
                self.match(LATEXParser.ML_LEFT)
                self.state = 622
                self.match(LATEXParser.L_FLOOR)
                self.state = 623
                self.expr()
                self.state = 624
                self.match(LATEXParser.MR_RIGHT)
                self.state = 625
                self.match(LATEXParser.R_FLOOR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 627
                self.match(LATEXParser.ML_LEFT)
                self.state = 628
                self.match(LATEXParser.LL_CORNER)
                self.state = 629
                self.expr()
                self.state = 630
                self.match(LATEXParser.MR_RIGHT)
                self.state = 631
                self.match(LATEXParser.LR_CORNER)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ceil_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CEIL(self):
            return self.getToken(LATEXParser.L_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_CEIL(self):
            return self.getToken(LATEXParser.R_CEIL, 0)

        def UL_CORNER(self):
            return self.getToken(LATEXParser.UL_CORNER, 0)

        def UR_CORNER(self):
            return self.getToken(LATEXParser.UR_CORNER, 0)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_ceil_group

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCeil_group"):
                listener.enterCeil_group(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCeil_group"):
                listener.exitCeil_group(self)

    def ceil_group(self):

        localctx = LATEXParser.Ceil_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ceil_group)
        try:
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 635
                self.match(LATEXParser.L_CEIL)
                self.state = 636
                self.expr()
                self.state = 637
                self.match(LATEXParser.R_CEIL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 639
                self.match(LATEXParser.UL_CORNER)
                self.state = 640
                self.expr()
                self.state = 641
                self.match(LATEXParser.UR_CORNER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.match(LATEXParser.L_LEFT)
                self.state = 644
                self.match(LATEXParser.L_CEIL)
                self.state = 645
                self.expr()
                self.state = 646
                self.match(LATEXParser.R_RIGHT)
                self.state = 647
                self.match(LATEXParser.R_CEIL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 649
                self.match(LATEXParser.L_LEFT)
                self.state = 650
                self.match(LATEXParser.UL_CORNER)
                self.state = 651
                self.expr()
                self.state = 652
                self.match(LATEXParser.R_RIGHT)
                self.state = 653
                self.match(LATEXParser.UR_CORNER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 655
                self.match(LATEXParser.ML_LEFT)
                self.state = 656
                self.match(LATEXParser.L_CEIL)
                self.state = 657
                self.expr()
                self.state = 658
                self.match(LATEXParser.MR_RIGHT)
                self.state = 659
                self.match(LATEXParser.R_CEIL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 661
                self.match(LATEXParser.ML_LEFT)
                self.state = 662
                self.match(LATEXParser.UL_CORNER)
                self.state = 663
                self.expr()
                self.state = 664
                self.match(LATEXParser.MR_RIGHT)
                self.state = 665
                self.match(LATEXParser.UR_CORNER)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.base = None  # ExprContext

        def accent_symbol(self):
            return self.getTypedRuleContext(LATEXParser.Accent_symbolContext, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_accent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAccent"):
                listener.enterAccent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAccent"):
                listener.exitAccent(self)

    def accent(self):

        localctx = LATEXParser.AccentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_accent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.accent_symbol()
            self.state = 670
            self.match(LATEXParser.L_BRACE)
            self.state = 671
            localctx.base = self.expr()
            self.state = 672
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self):
            return self.getToken(LATEXParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(LATEXParser.GREEK_CMD, 0)

        def accent(self):
            return self.getTypedRuleContext(LATEXParser.AccentContext, 0)

        def supexpr(self):
            return self.getTypedRuleContext(LATEXParser.SupexprContext, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LATEXParser.SubexprContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_atom_expr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom_expr"):
                listener.enterAtom_expr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom_expr"):
                listener.exitAtom_expr(self)

    def atom_expr(self):

        localctx = LATEXParser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_atom_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.state = 674
                self.match(LATEXParser.LETTER_NO_E)
                pass
            elif token in [124]:
                self.state = 675
                self.match(LATEXParser.GREEK_CMD)
                pass
            elif token in [100, 101]:
                self.state = 676
                self.accent()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
            if la_ == 1:
                self.state = 679
                self.supexpr()
                self.state = 680
                self.subexpr()

            elif la_ == 2:
                self.state = 682
                self.subexpr()
                self.state = 683
                self.supexpr()

            elif la_ == 3:
                self.state = 685
                self.subexpr()

            elif la_ == 4:
                self.state = 686
                self.supexpr()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(LATEXParser.Atom_exprContext, 0)

        def SYMBOL(self):
            return self.getToken(LATEXParser.SYMBOL, 0)

        def NUMBER(self):
            return self.getToken(LATEXParser.NUMBER, 0)

        def SCI_NOTATION_NUMBER(self):
            return self.getToken(LATEXParser.SCI_NOTATION_NUMBER, 0)

        def FRACTION_NUMBER(self):
            return self.getToken(LATEXParser.FRACTION_NUMBER, 0)

        def PERCENT_NUMBER(self):
            return self.getToken(LATEXParser.PERCENT_NUMBER, 0)

        def E_NOTATION(self):
            return self.getToken(LATEXParser.E_NOTATION, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LATEXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LATEXParser.MathitContext, 0)

        def VARIABLE(self):
            return self.getToken(LATEXParser.VARIABLE, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

    def atom(self):

        localctx = LATEXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_atom)
        try:
            self.state = 699
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [100, 101, 111, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.atom_expr()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.match(LATEXParser.SYMBOL)
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.match(LATEXParser.NUMBER)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 4)
                self.state = 692
                self.match(LATEXParser.SCI_NOTATION_NUMBER)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 5)
                self.state = 693
                self.match(LATEXParser.FRACTION_NUMBER)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 6)
                self.state = 694
                self.match(LATEXParser.PERCENT_NUMBER)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 7)
                self.state = 695
                self.match(LATEXParser.E_NOTATION)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 8)
                self.state = 696
                self.match(LATEXParser.DIFFERENTIAL)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 9)
                self.state = 697
                self.mathit()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 10)
                self.state = 698
                self.match(LATEXParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LATEXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LATEXParser.Mathit_textContext, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_mathit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMathit"):
                listener.enterMathit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMathit"):
                listener.exitMathit(self)

    def mathit(self):

        localctx = LATEXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(LATEXParser.CMD_MATHIT)
            self.state = 702
            self.match(LATEXParser.L_BRACE)
            self.state = 703
            self.mathit_text()
            self.state = 704
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mathit_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER_NO_E(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.LETTER_NO_E)
            else:
                return self.getToken(LATEXParser.LETTER_NO_E, i)

        def E_NOTATION_E(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.E_NOTATION_E)
            else:
                return self.getToken(LATEXParser.E_NOTATION_E, i)

        def EXP_E(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.EXP_E)
            else:
                return self.getToken(LATEXParser.EXP_E, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_mathit_text

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMathit_text"):
                listener.enterMathit_text(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMathit_text"):
                listener.exitMathit_text(self)

    def mathit_text(self):

        localctx = LATEXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_mathit_text)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 706
                _la = self._input.LA(1)
                if not ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 7) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 7) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None  # ExprContext
            self.lower = None  # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LATEXParser.CMD_FRAC, 0)

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.L_BRACE)
            else:
                return self.getToken(LATEXParser.L_BRACE, i)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.R_BRACE)
            else:
                return self.getToken(LATEXParser.R_BRACE, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LATEXParser.ExprContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_frac

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrac"):
                listener.enterFrac(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrac"):
                listener.exitFrac(self)

    def frac(self):

        localctx = LATEXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(LATEXParser.CMD_FRAC)
            self.state = 712
            self.match(LATEXParser.L_BRACE)
            self.state = 713
            localctx.upper = self.expr()
            self.state = 714
            self.match(LATEXParser.R_BRACE)
            self.state = 715
            self.match(LATEXParser.L_BRACE)
            self.state = 716
            localctx.lower = self.expr()
            self.state = 717
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None  # ExprContext
            self.lower = None  # ExprContext

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.L_BRACE)
            else:
                return self.getToken(LATEXParser.L_BRACE, i)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.R_BRACE)
            else:
                return self.getToken(LATEXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LATEXParser.CMD_BINOM, 0)

        def CMD_CHOOSE(self):
            return self.getToken(LATEXParser.CMD_CHOOSE, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LATEXParser.ExprContext, i)

        def getRuleIndex(self):
            return LATEXParser.RULE_binom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinom"):
                listener.enterBinom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinom"):
                listener.exitBinom(self)

    def binom(self):

        localctx = LATEXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_binom)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not (_la == 87 or _la == 88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 720
            self.match(LATEXParser.L_BRACE)
            self.state = 721
            localctx.upper = self.expr()
            self.state = 722
            self.match(LATEXParser.R_BRACE)
            self.state = 723
            self.match(LATEXParser.L_BRACE)
            self.state = 724
            localctx.lower = self.expr()
            self.state = 725
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normal_functions_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_LOG(self):
            return self.getToken(LATEXParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(LATEXParser.FUNC_LN, 0)

        def FUNC_EXP(self):
            return self.getToken(LATEXParser.FUNC_EXP, 0)

        def FUNC_SIN(self):
            return self.getToken(LATEXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LATEXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LATEXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LATEXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LATEXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LATEXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LATEXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LATEXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LATEXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LATEXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LATEXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LATEXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LATEXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LATEXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LATEXParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(LATEXParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(LATEXParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(LATEXParser.FUNC_ARTANH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(LATEXParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(LATEXParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(LATEXParser.FUNC_ARCTANH, 0)

        def FUNC_FLOOR(self):
            return self.getToken(LATEXParser.FUNC_FLOOR, 0)

        def FUNC_CEIL(self):
            return self.getToken(LATEXParser.FUNC_CEIL, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_normal_functions_single_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_normal_functions_single_arg"):
                listener.enterFunc_normal_functions_single_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_normal_functions_single_arg"):
                listener.exitFunc_normal_functions_single_arg(self)

    def func_normal_functions_single_arg(self):

        localctx = LATEXParser.Func_normal_functions_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_func_normal_functions_single_arg)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            _la = self._input.LA(1)
            if not ((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & 412333637631) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normal_functions_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD(self):
            return self.getToken(LATEXParser.FUNC_GCD, 0)

        def FUNC_LCM(self):
            return self.getToken(LATEXParser.FUNC_LCM, 0)

        def FUNC_MAX(self):
            return self.getToken(LATEXParser.FUNC_MAX, 0)

        def FUNC_MIN(self):
            return self.getToken(LATEXParser.FUNC_MIN, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_normal_functions_multi_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_normal_functions_multi_arg"):
                listener.enterFunc_normal_functions_multi_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_normal_functions_multi_arg"):
                listener.exitFunc_normal_functions_multi_arg(self)

    def func_normal_functions_multi_arg(self):

        localctx = LATEXParser.Func_normal_functions_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_func_normal_functions_multi_arg)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            _la = self._input.LA(1)
            if not ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 51) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_operator_names_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_ARSINH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARSINH_NAME, 0)

        def FUNC_ARCOSH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARCOSH_NAME, 0)

        def FUNC_ARTANH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARTANH_NAME, 0)

        def FUNC_ARCSINH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARCSINH_NAME, 0)

        def FUNC_ARCCOSH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARCCOSH_NAME, 0)

        def FUNC_ARCTANH_NAME(self):
            return self.getToken(LATEXParser.FUNC_ARCTANH_NAME, 0)

        def FUNC_FLOOR_NAME(self):
            return self.getToken(LATEXParser.FUNC_FLOOR_NAME, 0)

        def FUNC_CEIL_NAME(self):
            return self.getToken(LATEXParser.FUNC_CEIL_NAME, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_operator_names_single_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_operator_names_single_arg"):
                listener.enterFunc_operator_names_single_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_operator_names_single_arg"):
                listener.exitFunc_operator_names_single_arg(self)

    def func_operator_names_single_arg(self):

        localctx = LATEXParser.Func_operator_names_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_func_operator_names_single_arg)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            _la = self._input.LA(1)
            if not ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 831) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_operator_names_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_GCD_NAME(self):
            return self.getToken(LATEXParser.FUNC_GCD_NAME, 0)

        def FUNC_LCM_NAME(self):
            return self.getToken(LATEXParser.FUNC_LCM_NAME, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_operator_names_multi_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_operator_names_multi_arg"):
                listener.enterFunc_operator_names_multi_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_operator_names_multi_arg"):
                listener.exitFunc_operator_names_multi_arg(self)

    def func_operator_names_multi_arg(self):

        localctx = LATEXParser.Func_operator_names_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_func_operator_names_multi_arg)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            _la = self._input.LA(1)
            if not (_la == 72 or _la == 73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normal_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None  # Func_operator_names_single_argContext

        def func_normal_functions_single_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_normal_functions_single_argContext, 0)

        def CMD_OPERATORNAME(self):
            return self.getToken(LATEXParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def func_operator_names_single_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_operator_names_single_argContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_normal_single_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_normal_single_arg"):
                listener.enterFunc_normal_single_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_normal_single_arg"):
                listener.exitFunc_normal_single_arg(self)

    def func_normal_single_arg(self):

        localctx = LATEXParser.Func_normal_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_func_normal_single_arg)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.func_normal_functions_single_arg()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(LATEXParser.CMD_OPERATORNAME)
                self.state = 737
                self.match(LATEXParser.L_BRACE)
                self.state = 738
                localctx.func_operator_name = self.func_operator_names_single_arg()
                self.state = 739
                self.match(LATEXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normal_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.func_operator_name = None  # Func_operator_names_multi_argContext

        def func_normal_functions_multi_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_normal_functions_multi_argContext, 0)

        def CMD_OPERATORNAME(self):
            return self.getToken(LATEXParser.CMD_OPERATORNAME, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def func_operator_names_multi_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_operator_names_multi_argContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_normal_multi_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_normal_multi_arg"):
                listener.enterFunc_normal_multi_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_normal_multi_arg"):
                listener.exitFunc_normal_multi_arg(self)

    def func_normal_multi_arg(self):

        localctx = LATEXParser.Func_normal_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_func_normal_multi_arg)
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 78, 81, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.func_normal_functions_multi_arg()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(LATEXParser.CMD_OPERATORNAME)
                self.state = 745
                self.match(LATEXParser.L_BRACE)
                self.state = 746
                localctx.func_operator_name = self.func_operator_names_multi_arg()
                self.state = 747
                self.match(LATEXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None  # ExprContext
            self.base = None  # ExprContext

        def func_normal_single_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_normal_single_argContext, 0)

        def L_PAREN(self):
            return self.getToken(LATEXParser.L_PAREN, 0)

        def func_single_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_single_argContext, 0)

        def R_PAREN(self):
            return self.getToken(LATEXParser.R_PAREN, 0)

        def func_single_arg_noparens(self):
            return self.getTypedRuleContext(LATEXParser.Func_single_arg_noparensContext, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LATEXParser.SubexprContext, 0)

        def supexpr(self):
            return self.getTypedRuleContext(LATEXParser.SupexprContext, 0)

        def L_LEFT(self):
            return self.getToken(LATEXParser.L_LEFT, 0)

        def R_RIGHT(self):
            return self.getToken(LATEXParser.R_RIGHT, 0)

        def ML_LEFT(self):
            return self.getToken(LATEXParser.ML_LEFT, 0)

        def MR_RIGHT(self):
            return self.getToken(LATEXParser.MR_RIGHT, 0)

        def func_normal_multi_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_normal_multi_argContext, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_multi_argContext, 0)

        def func_multi_arg_noparens(self):
            return self.getTypedRuleContext(LATEXParser.Func_multi_arg_noparensContext, 0)

        def FUNC_INT(self):
            return self.getToken(LATEXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LATEXParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LATEXParser.FracContext, 0)

        def additive(self):
            return self.getTypedRuleContext(LATEXParser.AdditiveContext, 0)

        def UNDERSCORE(self):
            return self.getToken(LATEXParser.UNDERSCORE, 0)

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.L_BRACE)
            else:
                return self.getToken(LATEXParser.L_BRACE, i)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.R_BRACE)
            else:
                return self.getToken(LATEXParser.R_BRACE, i)

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def FUNC_SQRT(self):
            return self.getToken(LATEXParser.FUNC_SQRT, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LATEXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LATEXParser.ExprContext, i)

        def L_BRACKET(self):
            return self.getToken(LATEXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LATEXParser.R_BRACKET, 0)

        def mp(self):
            return self.getTypedRuleContext(LATEXParser.MpContext, 0)

        def FUNC_SUM(self):
            return self.getToken(LATEXParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(LATEXParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(LATEXParser.SubeqContext, 0)

        def FUNC_LIM(self):
            return self.getToken(LATEXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LATEXParser.Limit_subContext, 0)

        def EXP_E(self):
            return self.getToken(LATEXParser.EXP_E, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc"):
                listener.enterFunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc"):
                listener.exitFunc(self)

    def func(self):

        localctx = LATEXParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_func)
        self._la = 0  # Token type
        try:
            self.state = 888
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.func_normal_single_arg()
                self.state = 764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
                if la_ == 1:
                    self.state = 753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 102:
                        self.state = 752
                        self.subexpr()

                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 103:
                        self.state = 755
                        self.supexpr()

                    pass

                elif la_ == 2:
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 103:
                        self.state = 758
                        self.supexpr()

                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 102:
                        self.state = 761
                        self.subexpr()

                    pass

                self.state = 787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
                if la_ == 1:
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 33:
                        self.state = 766
                        self.match(LATEXParser.L_LEFT)

                    self.state = 769
                    self.match(LATEXParser.L_PAREN)
                    self.state = 770
                    self.func_single_arg()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 34:
                        self.state = 771
                        self.match(LATEXParser.R_RIGHT)

                    self.state = 774
                    self.match(LATEXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 35:
                        self.state = 776
                        self.match(LATEXParser.ML_LEFT)

                    self.state = 779
                    self.match(LATEXParser.L_PAREN)
                    self.state = 780
                    self.func_single_arg()
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 36:
                        self.state = 781
                        self.match(LATEXParser.MR_RIGHT)

                    self.state = 784
                    self.match(LATEXParser.R_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 786
                    self.func_single_arg_noparens()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.func_normal_multi_arg()
                self.state = 802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                if la_ == 1:
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 102:
                        self.state = 790
                        self.subexpr()

                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 103:
                        self.state = 793
                        self.supexpr()

                    pass

                elif la_ == 2:
                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 103:
                        self.state = 796
                        self.supexpr()

                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 102:
                        self.state = 799
                        self.subexpr()

                    pass

                self.state = 825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                if la_ == 1:
                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 33:
                        self.state = 804
                        self.match(LATEXParser.L_LEFT)

                    self.state = 807
                    self.match(LATEXParser.L_PAREN)
                    self.state = 808
                    self.func_multi_arg()
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 34:
                        self.state = 809
                        self.match(LATEXParser.R_RIGHT)

                    self.state = 812
                    self.match(LATEXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 35:
                        self.state = 814
                        self.match(LATEXParser.ML_LEFT)

                    self.state = 817
                    self.match(LATEXParser.L_PAREN)
                    self.state = 818
                    self.func_multi_arg()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 36:
                        self.state = 819
                        self.match(LATEXParser.MR_RIGHT)

                    self.state = 822
                    self.match(LATEXParser.R_PAREN)
                    pass

                elif la_ == 3:
                    self.state = 824
                    self.func_multi_arg_noparens()
                    pass

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.match(LATEXParser.FUNC_INT)
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                if la_ == 1:
                    self.state = 828
                    self.subexpr()
                    self.state = 829
                    self.supexpr()

                elif la_ == 2:
                    self.state = 831
                    self.supexpr()
                    self.state = 832
                    self.subexpr()

                elif la_ == 3:
                    self.state = 834
                    self.match(LATEXParser.UNDERSCORE)
                    self.state = 835
                    self.match(LATEXParser.L_BRACE)
                    self.state = 836
                    self.match(LATEXParser.R_BRACE)

                    self.state = 838
                    self.match(LATEXParser.CARET)
                    self.state = 839
                    self.match(LATEXParser.L_BRACE)
                    self.state = 840
                    self.match(LATEXParser.R_BRACE)

                elif la_ == 4:
                    self.state = 841
                    self.match(LATEXParser.CARET)
                    self.state = 842
                    self.match(LATEXParser.L_BRACE)
                    self.state = 843
                    self.match(LATEXParser.R_BRACE)

                    self.state = 845
                    self.match(LATEXParser.UNDERSCORE)
                    self.state = 846
                    self.match(LATEXParser.L_BRACE)
                    self.state = 847
                    self.match(LATEXParser.R_BRACE)

                self.state = 856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
                if la_ == 1:
                    self.state = 851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
                    if la_ == 1:
                        self.state = 850
                        self.additive(0)

                    self.state = 853
                    self.match(LATEXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 854
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 855
                    self.additive(0)
                    pass

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 858
                self.match(LATEXParser.FUNC_SQRT)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 17:
                    self.state = 859
                    self.match(LATEXParser.L_BRACKET)
                    self.state = 860
                    localctx.root = self.expr()
                    self.state = 861
                    self.match(LATEXParser.R_BRACKET)

                self.state = 865
                self.match(LATEXParser.L_BRACE)
                self.state = 866
                localctx.base = self.expr()
                self.state = 867
                self.match(LATEXParser.R_BRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 869
                _la = self._input.LA(1)
                if not (_la == 40 or _la == 41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 876
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 870
                    self.subeq()
                    self.state = 871
                    self.supexpr()
                    pass
                elif token in [103]:
                    self.state = 873
                    self.supexpr()
                    self.state = 874
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 878
                self.mp(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 880
                self.match(LATEXParser.FUNC_LIM)
                self.state = 881
                self.limit_sub()
                self.state = 882
                self.mp(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 884
                self.match(LATEXParser.EXP_E)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.supexpr()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def COMMA(self):
            return self.getToken(LATEXParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(LATEXParser.ArgsContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_args

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgs"):
                listener.enterArgs(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgs"):
                listener.exitArgs(self)

    def args(self):

        localctx = LATEXParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_args)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self.expr()
                self.state = 891
                self.match(LATEXParser.COMMA)
                self.state = 892
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.expr()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LATEXParser.UNDERSCORE, 0)

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.L_BRACE)
            else:
                return self.getToken(LATEXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LATEXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LATEXParser.R_BRACE)
            else:
                return self.getToken(LATEXParser.R_BRACE, i)

        def LETTER_NO_E(self):
            return self.getToken(LATEXParser.LETTER_NO_E, 0)

        def GREEK_CMD(self):
            return self.getToken(LATEXParser.GREEK_CMD, 0)

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LATEXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LATEXParser.SUB, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_limit_sub

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimit_sub"):
                listener.enterLimit_sub(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimit_sub"):
                listener.exitLimit_sub(self)

    def limit_sub(self):

        localctx = LATEXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_limit_sub)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(LATEXParser.UNDERSCORE)
            self.state = 898
            self.match(LATEXParser.L_BRACE)
            self.state = 899
            _la = self._input.LA(1)
            if not (_la == 111 or _la == 124):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 900
            self.match(LATEXParser.LIM_APPROACH_SYM)
            self.state = 901
            self.expr()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 103:
                self.state = 902
                self.match(LATEXParser.CARET)
                self.state = 903
                self.match(LATEXParser.L_BRACE)
                self.state = 904
                _la = self._input.LA(1)
                if not (_la == 3 or _la == 4):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 905
                self.match(LATEXParser.R_BRACE)

            self.state = 908
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_single_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_single_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_single_arg"):
                listener.enterFunc_single_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_single_arg"):
                listener.exitFunc_single_arg(self)

    def func_single_arg(self):

        localctx = LATEXParser.Func_single_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_single_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_single_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Mp_nofuncContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_single_arg_noparens

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_single_arg_noparens"):
                listener.enterFunc_single_arg_noparens(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_single_arg_noparens"):
                listener.exitFunc_single_arg_noparens(self)

    def func_single_arg_noparens(self):

        localctx = LATEXParser.Func_single_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_single_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_multi_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def COMMA(self):
            return self.getToken(LATEXParser.COMMA, 0)

        def func_multi_arg(self):
            return self.getTypedRuleContext(LATEXParser.Func_multi_argContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_multi_arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_multi_arg"):
                listener.enterFunc_multi_arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_multi_arg"):
                listener.exitFunc_multi_arg(self)

    def func_multi_arg(self):

        localctx = LATEXParser.Func_multi_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_multi_arg)
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.expr()
                self.state = 916
                self.match(LATEXParser.COMMA)
                self.state = 917
                self.func_multi_arg()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_multi_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LATEXParser.Mp_nofuncContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_func_multi_arg_noparens

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_multi_arg_noparens"):
                listener.enterFunc_multi_arg_noparens(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_multi_arg_noparens"):
                listener.exitFunc_multi_arg_noparens(self)

    def func_multi_arg_noparens(self):

        localctx = LATEXParser.Func_multi_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_multi_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LATEXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def args(self):
            return self.getTypedRuleContext(LATEXParser.ArgsContext, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_subexpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubexpr"):
                listener.enterSubexpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubexpr"):
                listener.exitSubexpr(self)

    def subexpr(self):

        localctx = LATEXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(LATEXParser.UNDERSCORE)
            self.state = 932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90, 100, 101, 108, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                self.state = 924
                self.atom()
                pass
            elif token in [11]:
                self.state = 925
                self.match(LATEXParser.L_BRACE)
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
                if la_ == 1:
                    self.state = 926
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 927
                    self.args()
                    pass

                self.state = 930
                self.match(LATEXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LATEXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LATEXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LATEXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_supexpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSupexpr"):
                listener.enterSupexpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSupexpr"):
                listener.exitSupexpr(self)

    def supexpr(self):

        localctx = LATEXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(LATEXParser.CARET)
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90, 100, 101, 108, 111, 112, 113, 114, 115, 123, 124, 125, 126]:
                self.state = 935
                self.atom()
                pass
            elif token in [11]:
                self.state = 936
                self.match(LATEXParser.L_BRACE)
                self.state = 937
                self.expr()
                self.state = 938
                self.match(LATEXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LATEXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LATEXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LATEXParser.EqualityContext, 0)

        def R_BRACE(self):
            return self.getToken(LATEXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LATEXParser.RULE_subeq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubeq"):
                listener.enterSubeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubeq"):
                listener.exitSubeq(self)

    def subeq(self):

        localctx = LATEXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(LATEXParser.UNDERSCORE)
            self.state = 943
            self.match(LATEXParser.L_BRACE)
            self.state = 944
            self.equality()
            self.state = 945
            self.match(LATEXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[4] = self.relation_sempred
        self._predicates[9] = self.additive_sempred
        self._predicates[10] = self.mp_sempred
        self._predicates[11] = self.mp_nofunc_sempred
        self._predicates[20] = self.exp_sempred
        self._predicates[21] = self.exp_nofunc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx: RelationContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

    def additive_sempred(self, localctx: AdditiveContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 2)

    def mp_sempred(self, localctx: MpContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 2)

    def mp_nofunc_sempred(self, localctx: Mp_nofuncContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 2)

    def exp_sempred(self, localctx: ExpContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 2)

    def exp_nofunc_sempred(self, localctx: Exp_nofuncContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 2)
